
GPIO_EXTI_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002058  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002308  08002308  00012308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800230c  0800230c  0001230c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08002310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000001c  0800232c  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000003c  0800232c  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000961a  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001774  00000000  00000000  000296a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000790  00000000  00000000  0002ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000594  00000000  00000000  0002b5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000396ea  00000000  00000000  0002bb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000083af  00000000  00000000  0006522e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018661d  00000000  00000000  0006d5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00001d2c  00000000  00000000  001f3bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  001f5928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2000001c 	.word	0x2000001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080022d8 	.word	0x080022d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000020 	.word	0x20000020
 80002d4:	080022d8 	.word	0x080022d8

080002d8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08c      	sub	sp, #48	; 0x30
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d009      	beq.n	8000300 <BSP_LED_Init+0x28>
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d006      	beq.n	8000300 <BSP_LED_Init+0x28>
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d003      	beq.n	8000300 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80002f8:	f06f 0301 	mvn.w	r3, #1
 80002fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002fe:	e055      	b.n	80003ac <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d10f      	bne.n	8000326 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000306:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <BSP_LED_Init+0xe0>)
 8000308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800030c:	4a2a      	ldr	r2, [pc, #168]	; (80003b8 <BSP_LED_Init+0xe0>)
 800030e:	f043 0302 	orr.w	r3, r3, #2
 8000312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000316:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <BSP_LED_Init+0xe0>)
 8000318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800031c:	f003 0302 	and.w	r3, r3, #2
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	e021      	b.n	800036a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10f      	bne.n	800034c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800032c:	4b22      	ldr	r3, [pc, #136]	; (80003b8 <BSP_LED_Init+0xe0>)
 800032e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000332:	4a21      	ldr	r2, [pc, #132]	; (80003b8 <BSP_LED_Init+0xe0>)
 8000334:	f043 0310 	orr.w	r3, r3, #16
 8000338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033c:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <BSP_LED_Init+0xe0>)
 800033e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000342:	f003 0310 	and.w	r3, r3, #16
 8000346:	613b      	str	r3, [r7, #16]
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	e00e      	b.n	800036a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800034c:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <BSP_LED_Init+0xe0>)
 800034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000352:	4a19      	ldr	r2, [pc, #100]	; (80003b8 <BSP_LED_Init+0xe0>)
 8000354:	f043 0302 	orr.w	r3, r3, #2
 8000358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <BSP_LED_Init+0xe0>)
 800035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000362:	f003 0302 	and.w	r3, r3, #2
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4a13      	ldr	r2, [pc, #76]	; (80003bc <BSP_LED_Init+0xe4>)
 800036e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000372:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800037c:	2303      	movs	r3, #3
 800037e:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	4a0f      	ldr	r2, [pc, #60]	; (80003c0 <BSP_LED_Init+0xe8>)
 8000384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000388:	f107 0218 	add.w	r2, r7, #24
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fb60 	bl	8000a54 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <BSP_LED_Init+0xe8>)
 8000398:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <BSP_LED_Init+0xe4>)
 80003a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003a4:	2200      	movs	r2, #0
 80003a6:	4619      	mov	r1, r3
 80003a8:	f000 fd04 	bl	8000db4 <HAL_GPIO_WritePin>
  }

  return ret;
 80003ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3730      	adds	r7, #48	; 0x30
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	58024400 	.word	0x58024400
 80003bc:	080022f0 	.word	0x080022f0
 80003c0:	20000000 	.word	0x20000000

080003c4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d009      	beq.n	80003ec <BSP_LED_Toggle+0x28>
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d006      	beq.n	80003ec <BSP_LED_Toggle+0x28>
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d003      	beq.n	80003ec <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80003e4:	f06f 0301 	mvn.w	r3, #1
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	e00b      	b.n	8000404 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	4a08      	ldr	r2, [pc, #32]	; (8000410 <BSP_LED_Toggle+0x4c>)
 80003f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4907      	ldr	r1, [pc, #28]	; (8000414 <BSP_LED_Toggle+0x50>)
 80003f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003fc:	4619      	mov	r1, r3
 80003fe:	4610      	mov	r0, r2
 8000400:	f000 fcf1 	bl	8000de6 <HAL_GPIO_TogglePin>
  }

  return ret;
 8000404:	68fb      	ldr	r3, [r7, #12]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000000 	.word	0x20000000
 8000414:	080022f0 	.word	0x080022f0

08000418 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800041c:	4b31      	ldr	r3, [pc, #196]	; (80004e4 <SystemInit+0xcc>)
 800041e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000422:	4a30      	ldr	r2, [pc, #192]	; (80004e4 <SystemInit+0xcc>)
 8000424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800042c:	4b2d      	ldr	r3, [pc, #180]	; (80004e4 <SystemInit+0xcc>)
 800042e:	691b      	ldr	r3, [r3, #16]
 8000430:	4a2c      	ldr	r2, [pc, #176]	; (80004e4 <SystemInit+0xcc>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000438:	4b2b      	ldr	r3, [pc, #172]	; (80004e8 <SystemInit+0xd0>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a2a      	ldr	r2, [pc, #168]	; (80004e8 <SystemInit+0xd0>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000444:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <SystemInit+0xd0>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800044a:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <SystemInit+0xd0>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4926      	ldr	r1, [pc, #152]	; (80004e8 <SystemInit+0xd0>)
 8000450:	4b26      	ldr	r3, [pc, #152]	; (80004ec <SystemInit+0xd4>)
 8000452:	4013      	ands	r3, r2
 8000454:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000456:	4b24      	ldr	r3, [pc, #144]	; (80004e8 <SystemInit+0xd0>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800045c:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <SystemInit+0xd0>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000462:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <SystemInit+0xd0>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000468:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <SystemInit+0xd0>)
 800046a:	2200      	movs	r2, #0
 800046c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800046e:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <SystemInit+0xd0>)
 8000470:	2200      	movs	r2, #0
 8000472:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <SystemInit+0xd0>)
 8000476:	2200      	movs	r2, #0
 8000478:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800047a:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <SystemInit+0xd0>)
 800047c:	2200      	movs	r2, #0
 800047e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <SystemInit+0xd0>)
 8000482:	2200      	movs	r2, #0
 8000484:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <SystemInit+0xd0>)
 8000488:	2200      	movs	r2, #0
 800048a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <SystemInit+0xd0>)
 800048e:	2200      	movs	r2, #0
 8000490:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <SystemInit+0xd0>)
 8000494:	2200      	movs	r2, #0
 8000496:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <SystemInit+0xd0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a12      	ldr	r2, [pc, #72]	; (80004e8 <SystemInit+0xd0>)
 800049e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <SystemInit+0xd0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000;  
 80004aa:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <SystemInit+0xd8>)
 80004ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ae:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <SystemInit+0xd8>)
 80004b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <SystemInit+0xdc>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <SystemInit+0xe0>)
 80004bc:	4013      	ands	r3, r2
 80004be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80004c2:	d202      	bcs.n	80004ca <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80004c4:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <SystemInit+0xe4>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <SystemInit+0xe8>)
 80004cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80004d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <SystemInit+0xcc>)
 80004d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	e000ed00 	.word	0xe000ed00
 80004e8:	58024400 	.word	0x58024400
 80004ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80004f0:	580000c0 	.word	0x580000c0
 80004f4:	5c001000 	.word	0x5c001000
 80004f8:	ffff0000 	.word	0xffff0000
 80004fc:	51008108 	.word	0x51008108
 8000500:	52004000 	.word	0x52004000

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050a:	2003      	movs	r0, #3
 800050c:	f000 f9e6 	bl	80008dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000510:	f001 fb36 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8000514:	4602      	mov	r2, r0
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_Init+0x68>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	0a1b      	lsrs	r3, r3, #8
 800051c:	f003 030f 	and.w	r3, r3, #15
 8000520:	4913      	ldr	r1, [pc, #76]	; (8000570 <HAL_Init+0x6c>)
 8000522:	5ccb      	ldrb	r3, [r1, r3]
 8000524:	f003 031f 	and.w	r3, r3, #31
 8000528:	fa22 f303 	lsr.w	r3, r2, r3
 800052c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_Init+0x68>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 030f 	and.w	r3, r3, #15
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <HAL_Init+0x6c>)
 8000538:	5cd3      	ldrb	r3, [r2, r3]
 800053a:	f003 031f 	and.w	r3, r3, #31
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	fa22 f303 	lsr.w	r3, r2, r3
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <HAL_Init+0x70>)
 8000546:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000548:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <HAL_Init+0x74>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800054e:	200f      	movs	r0, #15
 8000550:	f000 f81c 	bl	800058c <HAL_InitTick>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e002      	b.n	8000564 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800055e:	f000 f80d 	bl	800057c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	58024400 	.word	0x58024400
 8000570:	080022f8 	.word	0x080022f8
 8000574:	20000010 	.word	0x20000010
 8000578:	2000000c 	.word	0x2000000c

0800057c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_InitTick+0x60>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d101      	bne.n	80005a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	e021      	b.n	80005e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <HAL_InitTick+0x64>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_InitTick+0x60>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80005b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f9c3 	bl	8000942 <HAL_SYSTICK_Config>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e00e      	b.n	80005e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b0f      	cmp	r3, #15
 80005ca:	d80a      	bhi.n	80005e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005cc:	2200      	movs	r2, #0
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005d4:	f000 f98d 	bl	80008f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <HAL_InitTick+0x68>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	e000      	b.n	80005e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000018 	.word	0x20000018
 80005f0:	2000000c 	.word	0x2000000c
 80005f4:	20000014 	.word	0x20000014

080005f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_IncTick+0x20>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_IncTick+0x24>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4413      	add	r3, r2
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <HAL_IncTick+0x24>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000018 	.word	0x20000018
 800061c:	20000038 	.word	0x20000038

08000620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  return uwTick;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_GetTick+0x14>)
 8000626:	681b      	ldr	r3, [r3, #0]
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000038 	.word	0x20000038

08000638 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <HAL_GetREVID+0x14>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	0c1b      	lsrs	r3, r3, #16
}
 8000642:	4618      	mov	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	5c001000 	.word	0x5c001000

08000650 <HAL_EXTI_D2_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D2_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D2_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000662:	2b00      	cmp	r3, #0
 8000664:	d02d      	beq.n	80006c2 <HAL_EXTI_D2_EventInputConfig+0x72>
  {
    if( EXTI_LineCmd == 0UL)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d116      	bne.n	800069a <HAL_EXTI_D2_EventInputConfig+0x4a>
    {
    /* Clear EXTI line configuration */
     CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	095a      	lsrs	r2, r3, #5
 8000670:	4b30      	ldr	r3, [pc, #192]	; (8000734 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 8000672:	4413      	add	r3, r2
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	6819      	ldr	r1, [r3, #0]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f003 031f 	and.w	r3, r3, #31
 800067e:	2201      	movs	r2, #1
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	43da      	mvns	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	0958      	lsrs	r0, r3, #5
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 800068c:	4403      	add	r3, r0
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	4618      	mov	r0, r3
 8000692:	ea01 0302 	and.w	r3, r1, r2
 8000696:	6003      	str	r3, [r0, #0]
 8000698:	e013      	b.n	80006c2 <HAL_EXTI_D2_EventInputConfig+0x72>
    }
    else
    {
     SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D2->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	095a      	lsrs	r2, r3, #5
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 80006a0:	4413      	add	r3, r2
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f003 031f 	and.w	r3, r3, #31
 80006ac:	2201      	movs	r2, #1
 80006ae:	409a      	lsls	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	0958      	lsrs	r0, r3, #5
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <HAL_EXTI_D2_EventInputConfig+0xe4>)
 80006b6:	4403      	add	r3, r0
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	ea41 0302 	orr.w	r3, r1, r2
 80006c0:	6003      	str	r3, [r0, #0]
    }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d02d      	beq.n	8000728 <HAL_EXTI_D2_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d116      	bne.n	8000700 <HAL_EXTI_D2_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	095b      	lsrs	r3, r3, #5
 80006d6:	011a      	lsls	r2, r3, #4
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 80006da:	4413      	add	r3, r2
 80006dc:	6819      	ldr	r1, [r3, #0]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f003 031f 	and.w	r3, r3, #31
 80006e4:	2201      	movs	r2, #1
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	095b      	lsrs	r3, r3, #5
 80006f0:	0118      	lsls	r0, r3, #4
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 80006f4:	4403      	add	r3, r0
 80006f6:	4618      	mov	r0, r3
 80006f8:	ea01 0302 	and.w	r3, r1, r2
 80006fc:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
 80006fe:	e013      	b.n	8000728 <HAL_EXTI_D2_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D2->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	095b      	lsrs	r3, r3, #5
 8000704:	011a      	lsls	r2, r3, #4
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 8000708:	4413      	add	r3, r2
 800070a:	6819      	ldr	r1, [r3, #0]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 031f 	and.w	r3, r3, #31
 8000712:	2201      	movs	r2, #1
 8000714:	409a      	lsls	r2, r3
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	095b      	lsrs	r3, r3, #5
 800071a:	0118      	lsls	r0, r3, #4
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_EXTI_D2_EventInputConfig+0xe8>)
 800071e:	4403      	add	r3, r0
 8000720:	4618      	mov	r0, r3
 8000722:	ea41 0302 	orr.w	r3, r1, r2
 8000726:	6003      	str	r3, [r0, #0]
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	0580000c 	.word	0x0580000c
 8000738:	580000c4 	.word	0x580000c4

0800073c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <__NVIC_SetPriorityGrouping+0x40>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	4313      	orrs	r3, r2
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <__NVIC_SetPriorityGrouping+0x40>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	05fa0000 	.word	0x05fa0000

08000784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <__NVIC_GetPriorityGrouping+0x18>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	f003 0307 	and.w	r3, r3, #7
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db0b      	blt.n	80007ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	f003 021f 	and.w	r2, r3, #31
 80007b8:	4907      	ldr	r1, [pc, #28]	; (80007d8 <__NVIC_EnableIRQ+0x38>)
 80007ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007be:	095b      	lsrs	r3, r3, #5
 80007c0:	2001      	movs	r0, #1
 80007c2:	fa00 f202 	lsl.w	r2, r0, r2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000e100 	.word	0xe000e100

080007dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	6039      	str	r1, [r7, #0]
 80007e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	db0a      	blt.n	8000806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	490c      	ldr	r1, [pc, #48]	; (8000828 <__NVIC_SetPriority+0x4c>)
 80007f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007fa:	0112      	lsls	r2, r2, #4
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	440b      	add	r3, r1
 8000800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000804:	e00a      	b.n	800081c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4908      	ldr	r1, [pc, #32]	; (800082c <__NVIC_SetPriority+0x50>)
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	f003 030f 	and.w	r3, r3, #15
 8000812:	3b04      	subs	r3, #4
 8000814:	0112      	lsls	r2, r2, #4
 8000816:	b2d2      	uxtb	r2, r2
 8000818:	440b      	add	r3, r1
 800081a:	761a      	strb	r2, [r3, #24]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000e100 	.word	0xe000e100
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000830:	b480      	push	{r7}
 8000832:	b089      	sub	sp, #36	; 0x24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	f1c3 0307 	rsb	r3, r3, #7
 800084a:	2b04      	cmp	r3, #4
 800084c:	bf28      	it	cs
 800084e:	2304      	movcs	r3, #4
 8000850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3304      	adds	r3, #4
 8000856:	2b06      	cmp	r3, #6
 8000858:	d902      	bls.n	8000860 <NVIC_EncodePriority+0x30>
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	3b03      	subs	r3, #3
 800085e:	e000      	b.n	8000862 <NVIC_EncodePriority+0x32>
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43da      	mvns	r2, r3
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	401a      	ands	r2, r3
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000878:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	fa01 f303 	lsl.w	r3, r1, r3
 8000882:	43d9      	mvns	r1, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	4313      	orrs	r3, r2
         );
}
 800088a:	4618      	mov	r0, r3
 800088c:	3724      	adds	r7, #36	; 0x24
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a8:	d301      	bcc.n	80008ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00f      	b.n	80008ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <SysTick_Config+0x40>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b6:	210f      	movs	r1, #15
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008bc:	f7ff ff8e 	bl	80007dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <SysTick_Config+0x40>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <SysTick_Config+0x40>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	e000e010 	.word	0xe000e010

080008dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff29 	bl	800073c <__NVIC_SetPriorityGrouping>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000900:	f7ff ff40 	bl	8000784 <__NVIC_GetPriorityGrouping>
 8000904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	6978      	ldr	r0, [r7, #20]
 800090c:	f7ff ff90 	bl	8000830 <NVIC_EncodePriority>
 8000910:	4602      	mov	r2, r0
 8000912:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff5f 	bl	80007dc <__NVIC_SetPriority>
}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff33 	bl	80007a0 <__NVIC_EnableIRQ>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffa4 	bl	8000898 <SysTick_Config>
 8000950:	4603      	mov	r3, r0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000960:	f3bf 8f5f 	dmb	sy
}
 8000964:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_MPU_Disable+0x28>)
 8000968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096a:	4a06      	ldr	r2, [pc, #24]	; (8000984 <HAL_MPU_Disable+0x28>)
 800096c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000970:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_MPU_Disable+0x2c>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00
 8000988:	e000ed90 	.word	0xe000ed90

0800098c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <HAL_MPU_Enable+0x38>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_MPU_Enable+0x3c>)
 80009a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a2:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <HAL_MPU_Enable+0x3c>)
 80009a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80009aa:	f3bf 8f4f 	dsb	sy
}
 80009ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009b0:	f3bf 8f6f 	isb	sy
}
 80009b4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed90 	.word	0xe000ed90
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	785a      	ldrb	r2, [r3, #1]
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <HAL_MPU_ConfigRegion+0x84>)
 80009da:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d029      	beq.n	8000a38 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80009e4:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <HAL_MPU_ConfigRegion+0x84>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7b1b      	ldrb	r3, [r3, #12]
 80009f0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	7adb      	ldrb	r3, [r3, #11]
 80009f6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80009f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7a9b      	ldrb	r3, [r3, #10]
 80009fe:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000a00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7b5b      	ldrb	r3, [r3, #13]
 8000a06:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000a08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7b9b      	ldrb	r3, [r3, #14]
 8000a0e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000a10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7bdb      	ldrb	r3, [r3, #15]
 8000a16:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000a18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7a5b      	ldrb	r3, [r3, #9]
 8000a1e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000a20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7a1b      	ldrb	r3, [r3, #8]
 8000a26:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000a28:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a32:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a34:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000a36:	e005      	b.n	8000a44 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_MPU_ConfigRegion+0x84>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000a3e:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <HAL_MPU_ConfigRegion+0x84>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed90 	.word	0xe000ed90

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000a62:	4b89      	ldr	r3, [pc, #548]	; (8000c88 <HAL_GPIO_Init+0x234>)
 8000a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000a66:	e194      	b.n	8000d92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 8186 	beq.w	8000d8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d005      	beq.n	8000a98 <HAL_GPIO_Init+0x44>
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0303 	and.w	r3, r3, #3
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d130      	bne.n	8000afa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	68da      	ldr	r2, [r3, #12]
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	4013      	ands	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	091b      	lsrs	r3, r3, #4
 8000ae4:	f003 0201 	and.w	r2, r3, #1
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 0303 	and.w	r3, r3, #3
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d017      	beq.n	8000b36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2203      	movs	r2, #3
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d123      	bne.n	8000b8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	08da      	lsrs	r2, r3, #3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3208      	adds	r2, #8
 8000b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	220f      	movs	r2, #15
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	691a      	ldr	r2, [r3, #16]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	f003 0307 	and.w	r3, r3, #7
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	08da      	lsrs	r2, r3, #3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3208      	adds	r2, #8
 8000b84:	69b9      	ldr	r1, [r7, #24]
 8000b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2203      	movs	r2, #3
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0203 	and.w	r2, r3, #3
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 80e0 	beq.w	8000d8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bcc:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_GPIO_Init+0x238>)
 8000bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd2:	4a2e      	ldr	r2, [pc, #184]	; (8000c8c <HAL_GPIO_Init+0x238>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <HAL_GPIO_Init+0x238>)
 8000bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bea:	4a29      	ldr	r2, [pc, #164]	; (8000c90 <HAL_GPIO_Init+0x23c>)
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a20      	ldr	r2, [pc, #128]	; (8000c94 <HAL_GPIO_Init+0x240>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d052      	beq.n	8000cbc <HAL_GPIO_Init+0x268>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <HAL_GPIO_Init+0x244>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d031      	beq.n	8000c82 <HAL_GPIO_Init+0x22e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <HAL_GPIO_Init+0x248>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d02b      	beq.n	8000c7e <HAL_GPIO_Init+0x22a>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <HAL_GPIO_Init+0x24c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d025      	beq.n	8000c7a <HAL_GPIO_Init+0x226>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <HAL_GPIO_Init+0x250>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d01f      	beq.n	8000c76 <HAL_GPIO_Init+0x222>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_GPIO_Init+0x254>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d019      	beq.n	8000c72 <HAL_GPIO_Init+0x21e>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <HAL_GPIO_Init+0x258>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d013      	beq.n	8000c6e <HAL_GPIO_Init+0x21a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_GPIO_Init+0x25c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d00d      	beq.n	8000c6a <HAL_GPIO_Init+0x216>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <HAL_GPIO_Init+0x260>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d007      	beq.n	8000c66 <HAL_GPIO_Init+0x212>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_GPIO_Init+0x264>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_GPIO_Init+0x20e>
 8000c5e:	2309      	movs	r3, #9
 8000c60:	e02d      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c62:	230a      	movs	r3, #10
 8000c64:	e02b      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c66:	2308      	movs	r3, #8
 8000c68:	e029      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	e027      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c6e:	2306      	movs	r3, #6
 8000c70:	e025      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c72:	2305      	movs	r3, #5
 8000c74:	e023      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c76:	2304      	movs	r3, #4
 8000c78:	e021      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e01f      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e01d      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e01b      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c86:	bf00      	nop
 8000c88:	58000080 	.word	0x58000080
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58000400 	.word	0x58000400
 8000c94:	58020000 	.word	0x58020000
 8000c98:	58020400 	.word	0x58020400
 8000c9c:	58020800 	.word	0x58020800
 8000ca0:	58020c00 	.word	0x58020c00
 8000ca4:	58021000 	.word	0x58021000
 8000ca8:	58021400 	.word	0x58021400
 8000cac:	58021800 	.word	0x58021800
 8000cb0:	58021c00 	.word	0x58021c00
 8000cb4:	58022000 	.word	0x58022000
 8000cb8:	58022400 	.word	0x58022400
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	69fa      	ldr	r2, [r7, #28]
 8000cc0:	f002 0203 	and.w	r2, r2, #3
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	4093      	lsls	r3, r2
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cce:	4938      	ldr	r1, [pc, #224]	; (8000db0 <HAL_GPIO_Init+0x35c>)
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f47f ae63 	bne.w	8000a68 <HAL_GPIO_Init+0x14>
  }
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3724      	adds	r7, #36	; 0x24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	58000400 	.word	0x58000400

08000db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc4:	787b      	ldrb	r3, [r7, #1]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000dd0:	e003      	b.n	8000dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000dd2:	887b      	ldrh	r3, [r7, #2]
 8000dd4:	041a      	lsls	r2, r3, #16
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	619a      	str	r2, [r3, #24]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000df8:	887a      	ldrh	r2, [r7, #2]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	041a      	lsls	r2, r3, #16
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	887b      	ldrh	r3, [r7, #2]
 8000e06:	400b      	ands	r3, r1
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	619a      	str	r2, [r3, #24]
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8000e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d008      	beq.n	8000e46 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 f958 	bl	80020f6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000e58:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_HSEM_FastTake+0x2c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3320      	adds	r3, #32
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_HSEM_FastTake+0x30>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d101      	bne.n	8000e6c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e000      	b.n	8000e6e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	58026400 	.word	0x58026400
 8000e80:	80000300 	.word	0x80000300

08000e84 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000e8e:	4906      	ldr	r1, [pc, #24]	; (8000ea8 <HAL_HSEM_Release+0x24>)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	58026400 	.word	0x58026400

08000eac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <HAL_PWREx_ConfigSupply+0xb0>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	2b06      	cmp	r3, #6
 8000ebe:	d00a      	beq.n	8000ed6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_PWREx_ConfigSupply+0xb0>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d001      	beq.n	8000ed2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e040      	b.n	8000f54 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e03e      	b.n	8000f54 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <HAL_PWREx_ConfigSupply+0xb0>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000ede:	491f      	ldr	r1, [pc, #124]	; (8000f5c <HAL_PWREx_ConfigSupply+0xb0>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000ee6:	f7ff fb9b 	bl	8000620 <HAL_GetTick>
 8000eea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000eec:	e009      	b.n	8000f02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000eee:	f7ff fb97 	bl	8000620 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000efc:	d901      	bls.n	8000f02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e028      	b.n	8000f54 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_PWREx_ConfigSupply+0xb0>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f0e:	d1ee      	bne.n	8000eee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b1e      	cmp	r3, #30
 8000f14:	d008      	beq.n	8000f28 <HAL_PWREx_ConfigSupply+0x7c>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b2e      	cmp	r3, #46	; 0x2e
 8000f1a:	d005      	beq.n	8000f28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b1d      	cmp	r3, #29
 8000f20:	d002      	beq.n	8000f28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b2d      	cmp	r3, #45	; 0x2d
 8000f26:	d114      	bne.n	8000f52 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000f28:	f7ff fb7a 	bl	8000620 <HAL_GetTick>
 8000f2c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000f2e:	e009      	b.n	8000f44 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000f30:	f7ff fb76 	bl	8000620 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f3e:	d901      	bls.n	8000f44 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e007      	b.n	8000f54 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_PWREx_ConfigSupply+0xb0>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f50:	d1ee      	bne.n	8000f30 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	58024800 	.word	0x58024800

08000f60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f000 bc48 	b.w	8001804 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 8088 	beq.w	8001092 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f82:	4b99      	ldr	r3, [pc, #612]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f8c:	4b96      	ldr	r3, [pc, #600]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f94:	2b10      	cmp	r3, #16
 8000f96:	d007      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x48>
 8000f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9a:	2b18      	cmp	r3, #24
 8000f9c:	d111      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x62>
 8000f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d10c      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	4b8f      	ldr	r3, [pc, #572]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d06d      	beq.n	8001090 <HAL_RCC_OscConfig+0x130>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d169      	bne.n	8001090 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	f000 bc21 	b.w	8001804 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fca:	d106      	bne.n	8000fda <HAL_RCC_OscConfig+0x7a>
 8000fcc:	4b86      	ldr	r3, [pc, #536]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a85      	ldr	r2, [pc, #532]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e02e      	b.n	8001038 <HAL_RCC_OscConfig+0xd8>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x9c>
 8000fe2:	4b81      	ldr	r3, [pc, #516]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a80      	ldr	r2, [pc, #512]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b7e      	ldr	r3, [pc, #504]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a7d      	ldr	r2, [pc, #500]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e01d      	b.n	8001038 <HAL_RCC_OscConfig+0xd8>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0xc0>
 8001006:	4b78      	ldr	r3, [pc, #480]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a77      	ldr	r2, [pc, #476]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a74      	ldr	r2, [pc, #464]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e00b      	b.n	8001038 <HAL_RCC_OscConfig+0xd8>
 8001020:	4b71      	ldr	r3, [pc, #452]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a70      	ldr	r2, [pc, #448]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b6e      	ldr	r3, [pc, #440]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a6d      	ldr	r2, [pc, #436]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001040:	f7ff faee 	bl	8000620 <HAL_GetTick>
 8001044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff faea 	bl	8000620 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e3d4      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800105a:	4b63      	ldr	r3, [pc, #396]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0xe8>
 8001066:	e014      	b.n	8001092 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001068:	f7ff fada 	bl	8000620 <HAL_GetTick>
 800106c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fad6 	bl	8000620 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e3c0      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001082:	4b59      	ldr	r3, [pc, #356]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x110>
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 80ca 	beq.w	8001234 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a0:	4b51      	ldr	r3, [pc, #324]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010aa:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <HAL_RCC_OscConfig+0x166>
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	2b18      	cmp	r3, #24
 80010ba:	d156      	bne.n	800116a <HAL_RCC_OscConfig+0x20a>
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d151      	bne.n	800116a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <HAL_RCC_OscConfig+0x17e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e392      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80010de:	4b42      	ldr	r3, [pc, #264]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 0219 	bic.w	r2, r3, #25
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	493f      	ldr	r1, [pc, #252]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f0:	f7ff fa96 	bl	8000620 <HAL_GetTick>
 80010f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f8:	f7ff fa92 	bl	8000620 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e37c      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001116:	f7ff fa8f 	bl	8000638 <HAL_GetREVID>
 800111a:	4603      	mov	r3, r0
 800111c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001120:	4293      	cmp	r3, r2
 8001122:	d817      	bhi.n	8001154 <HAL_RCC_OscConfig+0x1f4>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	2b40      	cmp	r3, #64	; 0x40
 800112a:	d108      	bne.n	800113e <HAL_RCC_OscConfig+0x1de>
 800112c:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001134:	4a2c      	ldr	r2, [pc, #176]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800113c:	e07a      	b.n	8001234 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113e:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	031b      	lsls	r3, r3, #12
 800114c:	4926      	ldr	r1, [pc, #152]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001152:	e06f      	b.n	8001234 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	061b      	lsls	r3, r3, #24
 8001162:	4921      	ldr	r1, [pc, #132]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001168:	e064      	b.n	8001234 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d047      	beq.n	8001202 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 0219 	bic.w	r2, r3, #25
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	491a      	ldr	r1, [pc, #104]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff fa4c 	bl	8000620 <HAL_GetTick>
 8001188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118c:	f7ff fa48 	bl	8000620 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e332      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011aa:	f7ff fa45 	bl	8000638 <HAL_GetREVID>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d819      	bhi.n	80011ec <HAL_RCC_OscConfig+0x28c>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	2b40      	cmp	r3, #64	; 0x40
 80011be:	d108      	bne.n	80011d2 <HAL_RCC_OscConfig+0x272>
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 80011ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ce:	6053      	str	r3, [r2, #4]
 80011d0:	e030      	b.n	8001234 <HAL_RCC_OscConfig+0x2d4>
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	031b      	lsls	r3, r3, #12
 80011e0:	4901      	ldr	r1, [pc, #4]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]
 80011e6:	e025      	b.n	8001234 <HAL_RCC_OscConfig+0x2d4>
 80011e8:	58024400 	.word	0x58024400
 80011ec:	4b9a      	ldr	r3, [pc, #616]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	061b      	lsls	r3, r3, #24
 80011fa:	4997      	ldr	r1, [pc, #604]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
 8001200:	e018      	b.n	8001234 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001202:	4b95      	ldr	r3, [pc, #596]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a94      	ldr	r2, [pc, #592]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff fa07 	bl	8000620 <HAL_GetTick>
 8001212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fa03 	bl	8000620 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e2ed      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001228:	4b8b      	ldr	r3, [pc, #556]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f0      	bne.n	8001216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80a9 	beq.w	8001394 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001242:	4b85      	ldr	r3, [pc, #532]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800124a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800124c:	4b82      	ldr	r3, [pc, #520]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	2b08      	cmp	r3, #8
 8001256:	d007      	beq.n	8001268 <HAL_RCC_OscConfig+0x308>
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2b18      	cmp	r3, #24
 800125c:	d13a      	bne.n	80012d4 <HAL_RCC_OscConfig+0x374>
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d135      	bne.n	80012d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001268:	4b7b      	ldr	r3, [pc, #492]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <HAL_RCC_OscConfig+0x320>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b80      	cmp	r3, #128	; 0x80
 800127a:	d001      	beq.n	8001280 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e2c1      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001280:	f7ff f9da 	bl	8000638 <HAL_GetREVID>
 8001284:	4603      	mov	r3, r0
 8001286:	f241 0203 	movw	r2, #4099	; 0x1003
 800128a:	4293      	cmp	r3, r2
 800128c:	d817      	bhi.n	80012be <HAL_RCC_OscConfig+0x35e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	2b20      	cmp	r3, #32
 8001294:	d108      	bne.n	80012a8 <HAL_RCC_OscConfig+0x348>
 8001296:	4b70      	ldr	r3, [pc, #448]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800129e:	4a6e      	ldr	r2, [pc, #440]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80012a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80012a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012a6:	e075      	b.n	8001394 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012a8:	4b6b      	ldr	r3, [pc, #428]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	069b      	lsls	r3, r3, #26
 80012b6:	4968      	ldr	r1, [pc, #416]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012bc:	e06a      	b.n	8001394 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012be:	4b66      	ldr	r3, [pc, #408]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	061b      	lsls	r3, r3, #24
 80012cc:	4962      	ldr	r1, [pc, #392]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012d2:	e05f      	b.n	8001394 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d042      	beq.n	8001362 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80012dc:	4b5e      	ldr	r3, [pc, #376]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a5d      	ldr	r2, [pc, #372]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80012e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff f99a 	bl	8000620 <HAL_GetTick>
 80012ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80012f0:	f7ff f996 	bl	8000620 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e280      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001302:	4b55      	ldr	r3, [pc, #340]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800130e:	f7ff f993 	bl	8000638 <HAL_GetREVID>
 8001312:	4603      	mov	r3, r0
 8001314:	f241 0203 	movw	r2, #4099	; 0x1003
 8001318:	4293      	cmp	r3, r2
 800131a:	d817      	bhi.n	800134c <HAL_RCC_OscConfig+0x3ec>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	2b20      	cmp	r3, #32
 8001322:	d108      	bne.n	8001336 <HAL_RCC_OscConfig+0x3d6>
 8001324:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800132c:	4a4a      	ldr	r2, [pc, #296]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 800132e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001332:	6053      	str	r3, [r2, #4]
 8001334:	e02e      	b.n	8001394 <HAL_RCC_OscConfig+0x434>
 8001336:	4b48      	ldr	r3, [pc, #288]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	069b      	lsls	r3, r3, #26
 8001344:	4944      	ldr	r1, [pc, #272]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
 800134a:	e023      	b.n	8001394 <HAL_RCC_OscConfig+0x434>
 800134c:	4b42      	ldr	r3, [pc, #264]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	061b      	lsls	r3, r3, #24
 800135a:	493f      	ldr	r1, [pc, #252]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 800135c:	4313      	orrs	r3, r2
 800135e:	60cb      	str	r3, [r1, #12]
 8001360:	e018      	b.n	8001394 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a3c      	ldr	r2, [pc, #240]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800136c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136e:	f7ff f957 	bl	8000620 <HAL_GetTick>
 8001372:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001376:	f7ff f953 	bl	8000620 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e23d      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001388:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	2b00      	cmp	r3, #0
 800139e:	d036      	beq.n	800140e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d019      	beq.n	80013dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80013aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ac:	4a2a      	ldr	r2, [pc, #168]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b4:	f7ff f934 	bl	8000620 <HAL_GetTick>
 80013b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013bc:	f7ff f930 	bl	8000620 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e21a      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80013d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0x45c>
 80013da:	e018      	b.n	800140e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80013de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e0:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 80013e2:	f023 0301 	bic.w	r3, r3, #1
 80013e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e8:	f7ff f91a 	bl	8000620 <HAL_GetTick>
 80013ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff f916 	bl	8000620 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e200      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	2b00      	cmp	r3, #0
 8001418:	d039      	beq.n	800148e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01c      	beq.n	800145c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a0c      	ldr	r2, [pc, #48]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 8001428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800142c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800142e:	f7ff f8f7 	bl	8000620 <HAL_GetTick>
 8001432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001436:	f7ff f8f3 	bl	8000620 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e1dd      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <HAL_RCC_OscConfig+0x4f8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x4d6>
 8001454:	e01b      	b.n	800148e <HAL_RCC_OscConfig+0x52e>
 8001456:	bf00      	nop
 8001458:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800145c:	4b9b      	ldr	r3, [pc, #620]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a9a      	ldr	r2, [pc, #616]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001466:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001468:	f7ff f8da 	bl	8000620 <HAL_GetTick>
 800146c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001470:	f7ff f8d6 	bl	8000620 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1c0      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001482:	4b92      	ldr	r3, [pc, #584]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8081 	beq.w	800159e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800149c:	4b8c      	ldr	r3, [pc, #560]	; (80016d0 <HAL_RCC_OscConfig+0x770>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a8b      	ldr	r2, [pc, #556]	; (80016d0 <HAL_RCC_OscConfig+0x770>)
 80014a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80014a8:	f7ff f8ba 	bl	8000620 <HAL_GetTick>
 80014ac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b0:	f7ff f8b6 	bl	8000620 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e1a0      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80014c2:	4b83      	ldr	r3, [pc, #524]	; (80016d0 <HAL_RCC_OscConfig+0x770>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x584>
 80014d6:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	4a7c      	ldr	r2, [pc, #496]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6713      	str	r3, [r2, #112]	; 0x70
 80014e2:	e02d      	b.n	8001540 <HAL_RCC_OscConfig+0x5e0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0x5a6>
 80014ec:	4b77      	ldr	r3, [pc, #476]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	4a76      	ldr	r2, [pc, #472]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6713      	str	r3, [r2, #112]	; 0x70
 80014f8:	4b74      	ldr	r3, [pc, #464]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	4a73      	ldr	r2, [pc, #460]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6713      	str	r3, [r2, #112]	; 0x70
 8001504:	e01c      	b.n	8001540 <HAL_RCC_OscConfig+0x5e0>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b05      	cmp	r3, #5
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c8>
 800150e:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001512:	4a6e      	ldr	r2, [pc, #440]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6713      	str	r3, [r2, #112]	; 0x70
 800151a:	4b6c      	ldr	r3, [pc, #432]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a6b      	ldr	r2, [pc, #428]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0x5e0>
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a67      	ldr	r2, [pc, #412]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	4b65      	ldr	r3, [pc, #404]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	4a64      	ldr	r2, [pc, #400]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 800153a:	f023 0304 	bic.w	r3, r3, #4
 800153e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff f86a 	bl	8000620 <HAL_GetTick>
 800154c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff f866 	bl	8000620 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e14e      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001566:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0ee      	beq.n	8001550 <HAL_RCC_OscConfig+0x5f0>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff f854 	bl	8000620 <HAL_GetTick>
 8001578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800157a:	e00a      	b.n	8001592 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff f850 	bl	8000620 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e138      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001592:	4b4e      	ldr	r3, [pc, #312]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1ee      	bne.n	800157c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 812d 	beq.w	8001802 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80015a8:	4b48      	ldr	r3, [pc, #288]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015b0:	2b18      	cmp	r3, #24
 80015b2:	f000 80bd 	beq.w	8001730 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	f040 809e 	bne.w	80016fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c0:	4b42      	ldr	r3, [pc, #264]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a41      	ldr	r2, [pc, #260]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80015c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff f828 	bl	8000620 <HAL_GetTick>
 80015d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff f824 	bl	8000620 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e10e      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80015f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015f6:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <HAL_RCC_OscConfig+0x774>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	430a      	orrs	r2, r1
 8001606:	4931      	ldr	r1, [pc, #196]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001608:	4313      	orrs	r3, r2
 800160a:	628b      	str	r3, [r1, #40]	; 0x28
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	3b01      	subs	r3, #1
 8001612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161a:	3b01      	subs	r3, #1
 800161c:	025b      	lsls	r3, r3, #9
 800161e:	b29b      	uxth	r3, r3
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001626:	3b01      	subs	r3, #1
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001634:	3b01      	subs	r3, #1
 8001636:	061b      	lsls	r3, r3, #24
 8001638:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800163c:	4923      	ldr	r1, [pc, #140]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 800163e:	4313      	orrs	r3, r2
 8001640:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	4a21      	ldr	r2, [pc, #132]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_RCC_OscConfig+0x778>)
 8001654:	4013      	ands	r3, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800165a:	00d2      	lsls	r2, r2, #3
 800165c:	491b      	ldr	r1, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 800165e:	4313      	orrs	r3, r2
 8001660:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	f023 020c 	bic.w	r2, r3, #12
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4917      	ldr	r1, [pc, #92]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001670:	4313      	orrs	r3, r2
 8001672:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	f023 0202 	bic.w	r2, r3, #2
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	4912      	ldr	r1, [pc, #72]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001682:	4313      	orrs	r3, r2
 8001684:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_RCC_OscConfig+0x76c>)
 80016bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7fe ffad 	bl	8000620 <HAL_GetTick>
 80016c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016c8:	e011      	b.n	80016ee <HAL_RCC_OscConfig+0x78e>
 80016ca:	bf00      	nop
 80016cc:	58024400 	.word	0x58024400
 80016d0:	58024800 	.word	0x58024800
 80016d4:	fffffc0c 	.word	0xfffffc0c
 80016d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016dc:	f7fe ffa0 	bl	8000620 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e08a      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x77c>
 80016fa:	e082      	b.n	8001802 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fc:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a42      	ldr	r2, [pc, #264]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 8001702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7fe ff8a 	bl	8000620 <HAL_GetTick>
 800170c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7fe ff86 	bl	8000620 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e070      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001722:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x7b0>
 800172e:	e068      	b.n	8001802 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001730:	4b36      	ldr	r3, [pc, #216]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	2b01      	cmp	r3, #1
 8001742:	d031      	beq.n	80017a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f003 0203 	and.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d12a      	bne.n	80017a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d122      	bne.n	80017a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d11a      	bne.n	80017a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	0a5b      	lsrs	r3, r3, #9
 8001776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d111      	bne.n	80017a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001790:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d108      	bne.n	80017a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	0e1b      	lsrs	r3, r3, #24
 800179a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e02b      	b.n	8001804 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80017b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d01f      	beq.n	8001802 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017ce:	f7fe ff27 	bl	8000620 <HAL_GetTick>
 80017d2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80017d4:	bf00      	nop
 80017d6:	f7fe ff23 	bl	8000620 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	4293      	cmp	r3, r2
 80017e0:	d0f9      	beq.n	80017d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 80017e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_RCC_OscConfig+0x8b0>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017ee:	00d2      	lsls	r2, r2, #3
 80017f0:	4906      	ldr	r1, [pc, #24]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_RCC_OscConfig+0x8ac>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3730      	adds	r7, #48	; 0x30
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	58024400 	.word	0x58024400
 8001810:	ffff0007 	.word	0xffff0007

08001814 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e19c      	b.n	8001b62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b8a      	ldr	r3, [pc, #552]	; (8001a54 <HAL_RCC_ClockConfig+0x240>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d910      	bls.n	8001858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b87      	ldr	r3, [pc, #540]	; (8001a54 <HAL_RCC_ClockConfig+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 020f 	bic.w	r2, r3, #15
 800183e:	4985      	ldr	r1, [pc, #532]	; (8001a54 <HAL_RCC_ClockConfig+0x240>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b83      	ldr	r3, [pc, #524]	; (8001a54 <HAL_RCC_ClockConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e184      	b.n	8001b62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d010      	beq.n	8001886 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	4b7b      	ldr	r3, [pc, #492]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001870:	429a      	cmp	r2, r3
 8001872:	d908      	bls.n	8001886 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001874:	4b78      	ldr	r3, [pc, #480]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4975      	ldr	r1, [pc, #468]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 8001882:	4313      	orrs	r3, r2
 8001884:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d010      	beq.n	80018b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	4b70      	ldr	r3, [pc, #448]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800189e:	429a      	cmp	r2, r3
 80018a0:	d908      	bls.n	80018b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80018a2:	4b6d      	ldr	r3, [pc, #436]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	496a      	ldr	r1, [pc, #424]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d010      	beq.n	80018e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	4b64      	ldr	r3, [pc, #400]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d908      	bls.n	80018e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80018d0:	4b61      	ldr	r3, [pc, #388]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	495e      	ldr	r1, [pc, #376]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d010      	beq.n	8001910 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69da      	ldr	r2, [r3, #28]
 80018f2:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d908      	bls.n	8001910 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80018fe:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4953      	ldr	r1, [pc, #332]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 800190c:	4313      	orrs	r3, r2
 800190e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d010      	beq.n	800193e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 030f 	and.w	r3, r3, #15
 8001928:	429a      	cmp	r2, r3
 800192a:	d908      	bls.n	800193e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192c:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f023 020f 	bic.w	r2, r3, #15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4947      	ldr	r1, [pc, #284]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 800193a:	4313      	orrs	r3, r2
 800193c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d055      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800194a:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	4940      	ldr	r1, [pc, #256]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 8001958:	4313      	orrs	r3, r2
 800195a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d107      	bne.n	8001974 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001964:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d121      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0f6      	b.n	8001b62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d107      	bne.n	800198c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800197c:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d115      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0ea      	b.n	8001b62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0de      	b.n	8001b62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a4:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0d6      	b.n	8001b62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f023 0207 	bic.w	r2, r3, #7
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4925      	ldr	r1, [pc, #148]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019c6:	f7fe fe2b 	bl	8000620 <HAL_GetTick>
 80019ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ce:	f7fe fe27 	bl	8000620 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0be      	b.n	8001b62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d1eb      	bne.n	80019ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d010      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d208      	bcs.n	8001a24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f023 020f 	bic.w	r2, r3, #15
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	490e      	ldr	r1, [pc, #56]	; (8001a58 <HAL_RCC_ClockConfig+0x244>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_ClockConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d214      	bcs.n	8001a5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_RCC_ClockConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 020f 	bic.w	r2, r3, #15
 8001a3a:	4906      	ldr	r1, [pc, #24]	; (8001a54 <HAL_RCC_ClockConfig+0x240>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HAL_RCC_ClockConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e086      	b.n	8001b62 <HAL_RCC_ClockConfig+0x34e>
 8001a54:	52002000 	.word	0x52002000
 8001a58:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d208      	bcs.n	8001a8a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a78:	4b3c      	ldr	r3, [pc, #240]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	4939      	ldr	r1, [pc, #228]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d010      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	4b34      	ldr	r3, [pc, #208]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d208      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001aa6:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	492e      	ldr	r1, [pc, #184]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d010      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d208      	bcs.n	8001ae6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4922      	ldr	r1, [pc, #136]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d010      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69da      	ldr	r2, [r3, #28]
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d208      	bcs.n	8001b14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4917      	ldr	r1, [pc, #92]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b14:	f000 f834 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	4912      	ldr	r1, [pc, #72]	; (8001b70 <HAL_RCC_ClockConfig+0x35c>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_RCC_ClockConfig+0x358>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_RCC_ClockConfig+0x35c>)
 8001b3c:	5cd3      	ldrb	r3, [r2, r3]
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
 8001b48:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_RCC_ClockConfig+0x360>)
 8001b4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_RCC_ClockConfig+0x364>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_RCC_ClockConfig+0x368>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fd18 	bl	800058c <HAL_InitTick>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	080022f8 	.word	0x080022f8
 8001b74:	20000010 	.word	0x20000010
 8001b78:	2000000c 	.word	0x2000000c
 8001b7c:	20000014 	.word	0x20000014

08001b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b86:	4bb3      	ldr	r3, [pc, #716]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b8e:	2b18      	cmp	r3, #24
 8001b90:	f200 8155 	bhi.w	8001e3e <HAL_RCC_GetSysClockFreq+0x2be>
 8001b94:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9a:	bf00      	nop
 8001b9c:	08001c01 	.word	0x08001c01
 8001ba0:	08001e3f 	.word	0x08001e3f
 8001ba4:	08001e3f 	.word	0x08001e3f
 8001ba8:	08001e3f 	.word	0x08001e3f
 8001bac:	08001e3f 	.word	0x08001e3f
 8001bb0:	08001e3f 	.word	0x08001e3f
 8001bb4:	08001e3f 	.word	0x08001e3f
 8001bb8:	08001e3f 	.word	0x08001e3f
 8001bbc:	08001c27 	.word	0x08001c27
 8001bc0:	08001e3f 	.word	0x08001e3f
 8001bc4:	08001e3f 	.word	0x08001e3f
 8001bc8:	08001e3f 	.word	0x08001e3f
 8001bcc:	08001e3f 	.word	0x08001e3f
 8001bd0:	08001e3f 	.word	0x08001e3f
 8001bd4:	08001e3f 	.word	0x08001e3f
 8001bd8:	08001e3f 	.word	0x08001e3f
 8001bdc:	08001c2d 	.word	0x08001c2d
 8001be0:	08001e3f 	.word	0x08001e3f
 8001be4:	08001e3f 	.word	0x08001e3f
 8001be8:	08001e3f 	.word	0x08001e3f
 8001bec:	08001e3f 	.word	0x08001e3f
 8001bf0:	08001e3f 	.word	0x08001e3f
 8001bf4:	08001e3f 	.word	0x08001e3f
 8001bf8:	08001e3f 	.word	0x08001e3f
 8001bfc:	08001c33 	.word	0x08001c33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c00:	4b94      	ldr	r3, [pc, #592]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d009      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001c0c:	4b91      	ldr	r3, [pc, #580]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	4a90      	ldr	r2, [pc, #576]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001c1e:	e111      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c20:	4b8d      	ldr	r3, [pc, #564]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c22:	61bb      	str	r3, [r7, #24]
      break;
 8001c24:	e10e      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001c26:	4b8d      	ldr	r3, [pc, #564]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c28:	61bb      	str	r3, [r7, #24]
      break;
 8001c2a:	e10b      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001c2c:	4b8c      	ldr	r3, [pc, #560]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001c2e:	61bb      	str	r3, [r7, #24]
      break;
 8001c30:	e108      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c32:	4b88      	ldr	r3, [pc, #544]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001c3c:	4b85      	ldr	r3, [pc, #532]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001c48:	4b82      	ldr	r3, [pc, #520]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001c52:	4b80      	ldr	r3, [pc, #512]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	08db      	lsrs	r3, r3, #3
 8001c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80e1 	beq.w	8001e38 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	f000 8083 	beq.w	8001d84 <HAL_RCC_GetSysClockFreq+0x204>
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	f200 80a1 	bhi.w	8001dc8 <HAL_RCC_GetSysClockFreq+0x248>
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x114>
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d056      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001c92:	e099      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c94:	4b6f      	ldr	r3, [pc, #444]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d02d      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ca0:	4b6c      	ldr	r3, [pc, #432]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	08db      	lsrs	r3, r3, #3
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	4a6b      	ldr	r2, [pc, #428]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cca:	4b62      	ldr	r3, [pc, #392]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cde:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001cfa:	e087      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d06:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001e68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d0e:	4b51      	ldr	r3, [pc, #324]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d22:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d3e:	e065      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d4a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001e6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d52:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d66:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d82:	e043      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d8e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001e70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d96:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001daa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001dc6:	e021      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001e6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001e64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e0a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	0a5b      	lsrs	r3, r3, #9
 8001e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e16:	3301      	adds	r3, #1
 8001e18:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e30:	ee17 3a90 	vmov	r3, s15
 8001e34:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001e36:	e005      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
      break;
 8001e3c:	e002      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e40:	61bb      	str	r3, [r7, #24]
      break;
 8001e42:	bf00      	nop
  }

  return sysclockfreq;
 8001e44:	69bb      	ldr	r3, [r7, #24]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	58024400 	.word	0x58024400
 8001e58:	03d09000 	.word	0x03d09000
 8001e5c:	003d0900 	.word	0x003d0900
 8001e60:	007a1200 	.word	0x007a1200
 8001e64:	46000000 	.word	0x46000000
 8001e68:	4c742400 	.word	0x4c742400
 8001e6c:	4a742400 	.word	0x4a742400
 8001e70:	4af42400 	.word	0x4af42400

08001e74 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7)
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */

  /* Configure the MPU attributes */
  MPU_Config();
 8001e7a:	f000 f983 	bl	8002184 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8001e7e:	f000 f8c9 	bl	8002014 <CPU_CACHE_Enable>

  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e86:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001e88:	bf00      	nop
 8001e8a:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <main+0xa0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <main+0x2c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	dcf4      	bgt.n	8001e8a <main+0x16>
  if ( timeout < 0 )
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	da01      	bge.n	8001eaa <main+0x36>
  {
    Error_Handler();
 8001ea6:	f000 f923 	bl	80020f0 <Error_Handler>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8001eaa:	f7fe fb2b 	bl	8000504 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8001eae:	f000 f833 	bl	8001f18 <SystemClock_Config>

  /* When system initialization is finished, Cortex-M7 will release Cortex-M4  by means of
     HSEM notification */

  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <main+0xa0>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb8:	4a16      	ldr	r2, [pc, #88]	; (8001f14 <main+0xa0>)
 8001eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <main+0xa0>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]

  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7fe ffbd 	bl	8000e50 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0,0);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7fe ffd3 	bl	8000e84 <HAL_HSEM_Release>

  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 8001ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001ee4:	bf00      	nop
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <main+0xa0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d104      	bne.n	8001efc <main+0x88>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	dcf4      	bgt.n	8001ee6 <main+0x72>
  if ( timeout < 0 )
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	da01      	bge.n	8001f06 <main+0x92>
  {
    Error_Handler();
 8001f02:	f000 f8f5 	bl	80020f0 <Error_Handler>
  }

  /* -1- Initialize LEDs mounted on STM32H745ZI-Nucleo board */
  BSP_LED_Init(LED1);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7fe f9e6 	bl	80002d8 <BSP_LED_Init>
  
  /* -2- Configure EXTI15_10 (connected to PC.13 pin) to interrupt CPU1 and CPU2 */
  EXTI15_10_IRQHandler_Config();
 8001f0c:	f000 f904 	bl	8002118 <EXTI15_10_IRQHandler_Config>

  /* Infinite loop */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <main+0x9c>
 8001f12:	bf00      	nop
 8001f14:	58024400 	.word	0x58024400

08001f18 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b09e      	sub	sp, #120	; 0x78
 8001f1c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001f24:	2004      	movs	r0, #4
 8001f26:	f7fe ffc1 	bl	8000eac <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <SystemClock_Config+0xf4>)
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	4a36      	ldr	r2, [pc, #216]	; (800200c <SystemClock_Config+0xf4>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <SystemClock_Config+0xf4>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	4b32      	ldr	r3, [pc, #200]	; (8002010 <SystemClock_Config+0xf8>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a31      	ldr	r2, [pc, #196]	; (8002010 <SystemClock_Config+0xf8>)
 8001f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <SystemClock_Config+0xf8>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f5c:	bf00      	nop
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <SystemClock_Config+0xf8>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f6a:	d1f8      	bne.n	8001f5e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f74:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f82:	2302      	movs	r3, #2
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f86:	2304      	movs	r3, #4
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001f8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001fa8:	f107 0308 	add.w	r3, r7, #8
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe ffd7 	bl	8000f60 <HAL_RCC_OscConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8001fb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001fc0:	f000 f896 	bl	80020f0 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001fc4:	233f      	movs	r3, #63	; 0x3f
 8001fc6:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001fd4:	2340      	movs	r3, #64	; 0x40
 8001fd6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001fd8:	2340      	movs	r3, #64	; 0x40
 8001fda:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001fe2:	2340      	movs	r3, #64	; 0x40
 8001fe4:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001fe6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fea:	2104      	movs	r1, #4
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fc11 	bl	8001814 <HAL_RCC_ClockConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8001ff8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8002000:	f000 f876 	bl	80020f0 <Error_Handler>

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;

  HAL_EnableCompensationCell();
  */
}
 8002004:	bf00      	nop
 8002006:	3778      	adds	r7, #120	; 0x78
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	58000400 	.word	0x58000400
 8002010:	58024800 	.word	0x58024800

08002014 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <CPU_CACHE_Enable+0xd8>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d11b      	bne.n	800205e <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8002026:	f3bf 8f4f 	dsb	sy
}
 800202a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800202c:	f3bf 8f6f 	isb	sy
}
 8002030:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002032:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <CPU_CACHE_Enable+0xd8>)
 8002034:	2200      	movs	r2, #0
 8002036:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800203a:	f3bf 8f4f 	dsb	sy
}
 800203e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002040:	f3bf 8f6f 	isb	sy
}
 8002044:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <CPU_CACHE_Enable+0xd8>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4a28      	ldr	r2, [pc, #160]	; (80020ec <CPU_CACHE_Enable+0xd8>)
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002052:	f3bf 8f4f 	dsb	sy
}
 8002056:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002058:	f3bf 8f6f 	isb	sy
}
 800205c:	e000      	b.n	8002060 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800205e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <CPU_CACHE_Enable+0xd8>)
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d138      	bne.n	80020de <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <CPU_CACHE_Enable+0xd8>)
 800206e:	2200      	movs	r2, #0
 8002070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002074:	f3bf 8f4f 	dsb	sy
}
 8002078:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <CPU_CACHE_Enable+0xd8>)
 800207c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002080:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	0b5b      	lsrs	r3, r3, #13
 8002086:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800208a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	08db      	lsrs	r3, r3, #3
 8002090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002094:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800209e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80020a4:	4911      	ldr	r1, [pc, #68]	; (80020ec <CPU_CACHE_Enable+0xd8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1e5a      	subs	r2, r3, #1
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ef      	bne.n	8002096 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	60ba      	str	r2, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e5      	bne.n	800208c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80020c0:	f3bf 8f4f 	dsb	sy
}
 80020c4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <CPU_CACHE_Enable+0xd8>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <CPU_CACHE_Enable+0xd8>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80020d2:	f3bf 8f4f 	dsb	sy
}
 80020d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020d8:	f3bf 8f6f 	isb	sy
}
 80020dc:	e000      	b.n	80020e0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80020de:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 80020f4:	e7fe      	b.n	80020f4 <Error_Handler+0x4>

080020f6 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002106:	d102      	bne.n	800210e <HAL_GPIO_EXTI_Callback+0x18>
  {
    /* Toggle LED1 */
    BSP_LED_Toggle(LED1);
 8002108:	2000      	movs	r0, #0
 800210a:	f7fe f95b 	bl	80003c4 <BSP_LED_Toggle>
  }
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <EXTI15_10_IRQHandler_Config>:
  * @brief  Configures EXTI lines 15 to 10 (connected to PC.13 pin) in interrupt mode
  * @param  None
  * @retval None
  */
static void EXTI15_10_IRQHandler_Config(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;
  
  /* Enable GPIOC clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <EXTI15_10_IRQHandler_Config+0x64>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002124:	4a15      	ldr	r2, [pc, #84]	; (800217c <EXTI15_10_IRQHandler_Config+0x64>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <EXTI15_10_IRQHandler_Config+0x64>)
 8002130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
  
  /* Configure PC.13 pin as the EXTI input event line in interrupt mode for both CPU1 and CPU2*/
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;    /* current CPU (CM7) config in IT rising */
 800213c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002140:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 8002146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800214a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	4619      	mov	r1, r3
 8002150:	480b      	ldr	r0, [pc, #44]	; (8002180 <EXTI15_10_IRQHandler_Config+0x68>)
 8002152:	f7fe fc7f 	bl	8000a54 <HAL_GPIO_Init>
  
  /* Enable and set EXTI lines 15 to 10 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2102      	movs	r1, #2
 800215a:	2028      	movs	r0, #40	; 0x28
 800215c:	f7fe fbc9 	bl	80008f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002160:	2028      	movs	r0, #40	; 0x28
 8002162:	f7fe fbe0 	bl	8000926 <HAL_NVIC_EnableIRQ>
  
  /* Configure the second CPU (CM4) EXTI line for IT*/
  HAL_EXTI_D2_EventInputConfig(EXTI_LINE13 , EXTI_MODE_IT,  ENABLE);
 8002166:	2201      	movs	r2, #1
 8002168:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800216c:	200d      	movs	r0, #13
 800216e:	f7fe fa6f 	bl	8000650 <HAL_EXTI_D2_EventInputConfig>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	58024400 	.word	0x58024400
 8002180:	58020800 	.word	0x58020800

08002184 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 800218a:	f7fe fbe7 	bl	800095c <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 8002192:	2300      	movs	r3, #0
 8002194:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002196:	231f      	movs	r3, #31
 8002198:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800219a:	2300      	movs	r3, #0
 800219c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80021b2:	2387      	movs	r3, #135	; 0x87
 80021b4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021ba:	463b      	mov	r3, r7
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fc05 	bl	80009cc <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021c2:	2004      	movs	r0, #4
 80021c4:	f7fe fbe2 	bl	800098c <HAL_MPU_Enable>
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler+0x4>

080021ea <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8002224:	f7fe f9e8 	bl	80005f8 <HAL_IncTick>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8002230:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002234:	f7fe fdf1 	bl	8000e1a <HAL_GPIO_EXTI_IRQHandler>
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}

0800223c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800223c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002274 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002240:	f7fe f8ea 	bl	8000418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002246:	490d      	ldr	r1, [pc, #52]	; (800227c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002248:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800225c:	4c0a      	ldr	r4, [pc, #40]	; (8002288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800226a:	f000 f811 	bl	8002290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800226e:	f7ff fe01 	bl	8001e74 <main>
  bx  lr
 8002272:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002280:	08002310 	.word	0x08002310
  ldr r2, =_sbss
 8002284:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002288:	2000003c 	.word	0x2000003c

0800228c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC3_IRQHandler>
	...

08002290 <__libc_init_array>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4d0d      	ldr	r5, [pc, #52]	; (80022c8 <__libc_init_array+0x38>)
 8002294:	4c0d      	ldr	r4, [pc, #52]	; (80022cc <__libc_init_array+0x3c>)
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	2600      	movs	r6, #0
 800229c:	42a6      	cmp	r6, r4
 800229e:	d109      	bne.n	80022b4 <__libc_init_array+0x24>
 80022a0:	4d0b      	ldr	r5, [pc, #44]	; (80022d0 <__libc_init_array+0x40>)
 80022a2:	4c0c      	ldr	r4, [pc, #48]	; (80022d4 <__libc_init_array+0x44>)
 80022a4:	f000 f818 	bl	80022d8 <_init>
 80022a8:	1b64      	subs	r4, r4, r5
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	2600      	movs	r6, #0
 80022ae:	42a6      	cmp	r6, r4
 80022b0:	d105      	bne.n	80022be <__libc_init_array+0x2e>
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b8:	4798      	blx	r3
 80022ba:	3601      	adds	r6, #1
 80022bc:	e7ee      	b.n	800229c <__libc_init_array+0xc>
 80022be:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c2:	4798      	blx	r3
 80022c4:	3601      	adds	r6, #1
 80022c6:	e7f2      	b.n	80022ae <__libc_init_array+0x1e>
 80022c8:	08002308 	.word	0x08002308
 80022cc:	08002308 	.word	0x08002308
 80022d0:	08002308 	.word	0x08002308
 80022d4:	0800230c 	.word	0x0800230c

080022d8 <_init>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	bf00      	nop
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr

080022e4 <_fini>:
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	bf00      	nop
 80022e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ea:	bc08      	pop	{r3}
 80022ec:	469e      	mov	lr, r3
 80022ee:	4770      	bx	lr
