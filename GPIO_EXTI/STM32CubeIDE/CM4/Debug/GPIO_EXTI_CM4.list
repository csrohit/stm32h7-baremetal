
GPIO_EXTI_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f54  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  081011ec  081011ec  000111ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08101204  08101204  00011204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08101208  08101208  00011208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  10000000  0810120c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  1000001c  08101228  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000003c  08101228  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008524  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000161c  00000000  00000000  000285b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000768  00000000  00000000  00029bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000574  00000000  00000000  0002a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003937f  00000000  00000000  0002a8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00008127  00000000  00000000  00063c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018515d  00000000  00000000  0006bd52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00001c7c  00000000  00000000  001f0eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000071  00000000  00000000  001f2b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000001c 	.word	0x1000001c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081011d4 	.word	0x081011d4

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000020 	.word	0x10000020
 81002d4:	081011d4 	.word	0x081011d4

081002d8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 81002d8:	b580      	push	{r7, lr}
 81002da:	b08c      	sub	sp, #48	; 0x30
 81002dc:	af00      	add	r7, sp, #0
 81002de:	4603      	mov	r3, r0
 81002e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 81002e2:	2300      	movs	r3, #0
 81002e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 81002e6:	79fb      	ldrb	r3, [r7, #7]
 81002e8:	2b00      	cmp	r3, #0
 81002ea:	d009      	beq.n	8100300 <BSP_LED_Init+0x28>
 81002ec:	79fb      	ldrb	r3, [r7, #7]
 81002ee:	2b01      	cmp	r3, #1
 81002f0:	d006      	beq.n	8100300 <BSP_LED_Init+0x28>
 81002f2:	79fb      	ldrb	r3, [r7, #7]
 81002f4:	2b02      	cmp	r3, #2
 81002f6:	d003      	beq.n	8100300 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 81002f8:	f06f 0301 	mvn.w	r3, #1
 81002fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 81002fe:	e055      	b.n	81003ac <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8100300:	79fb      	ldrb	r3, [r7, #7]
 8100302:	2b00      	cmp	r3, #0
 8100304:	d10f      	bne.n	8100326 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8100306:	4b2c      	ldr	r3, [pc, #176]	; (81003b8 <BSP_LED_Init+0xe0>)
 8100308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810030c:	4a2a      	ldr	r2, [pc, #168]	; (81003b8 <BSP_LED_Init+0xe0>)
 810030e:	f043 0302 	orr.w	r3, r3, #2
 8100312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100316:	4b28      	ldr	r3, [pc, #160]	; (81003b8 <BSP_LED_Init+0xe0>)
 8100318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810031c:	f003 0302 	and.w	r3, r3, #2
 8100320:	617b      	str	r3, [r7, #20]
 8100322:	697b      	ldr	r3, [r7, #20]
 8100324:	e021      	b.n	810036a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8100326:	79fb      	ldrb	r3, [r7, #7]
 8100328:	2b01      	cmp	r3, #1
 810032a:	d10f      	bne.n	810034c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 810032c:	4b22      	ldr	r3, [pc, #136]	; (81003b8 <BSP_LED_Init+0xe0>)
 810032e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100332:	4a21      	ldr	r2, [pc, #132]	; (81003b8 <BSP_LED_Init+0xe0>)
 8100334:	f043 0310 	orr.w	r3, r3, #16
 8100338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810033c:	4b1e      	ldr	r3, [pc, #120]	; (81003b8 <BSP_LED_Init+0xe0>)
 810033e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100342:	f003 0310 	and.w	r3, r3, #16
 8100346:	613b      	str	r3, [r7, #16]
 8100348:	693b      	ldr	r3, [r7, #16]
 810034a:	e00e      	b.n	810036a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 810034c:	4b1a      	ldr	r3, [pc, #104]	; (81003b8 <BSP_LED_Init+0xe0>)
 810034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100352:	4a19      	ldr	r2, [pc, #100]	; (81003b8 <BSP_LED_Init+0xe0>)
 8100354:	f043 0302 	orr.w	r3, r3, #2
 8100358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810035c:	4b16      	ldr	r3, [pc, #88]	; (81003b8 <BSP_LED_Init+0xe0>)
 810035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100362:	f003 0302 	and.w	r3, r3, #2
 8100366:	60fb      	str	r3, [r7, #12]
 8100368:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 810036a:	79fb      	ldrb	r3, [r7, #7]
 810036c:	4a13      	ldr	r2, [pc, #76]	; (81003bc <BSP_LED_Init+0xe4>)
 810036e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8100372:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8100374:	2301      	movs	r3, #1
 8100376:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8100378:	2300      	movs	r3, #0
 810037a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810037c:	2303      	movs	r3, #3
 810037e:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8100380:	79fb      	ldrb	r3, [r7, #7]
 8100382:	4a0f      	ldr	r2, [pc, #60]	; (81003c0 <BSP_LED_Init+0xe8>)
 8100384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100388:	f107 0218 	add.w	r2, r7, #24
 810038c:	4611      	mov	r1, r2
 810038e:	4618      	mov	r0, r3
 8100390:	f000 fa32 	bl	81007f8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8100394:	79fb      	ldrb	r3, [r7, #7]
 8100396:	4a0a      	ldr	r2, [pc, #40]	; (81003c0 <BSP_LED_Init+0xe8>)
 8100398:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 810039c:	79fb      	ldrb	r3, [r7, #7]
 810039e:	4a07      	ldr	r2, [pc, #28]	; (81003bc <BSP_LED_Init+0xe4>)
 81003a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81003a4:	2200      	movs	r2, #0
 81003a6:	4619      	mov	r1, r3
 81003a8:	f000 fbd6 	bl	8100b58 <HAL_GPIO_WritePin>
  }

  return ret;
 81003ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 81003ae:	4618      	mov	r0, r3
 81003b0:	3730      	adds	r7, #48	; 0x30
 81003b2:	46bd      	mov	sp, r7
 81003b4:	bd80      	pop	{r7, pc}
 81003b6:	bf00      	nop
 81003b8:	58024400 	.word	0x58024400
 81003bc:	081011ec 	.word	0x081011ec
 81003c0:	10000000 	.word	0x10000000

081003c4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 81003c4:	b580      	push	{r7, lr}
 81003c6:	b084      	sub	sp, #16
 81003c8:	af00      	add	r7, sp, #0
 81003ca:	4603      	mov	r3, r0
 81003cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 81003ce:	2300      	movs	r3, #0
 81003d0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 81003d2:	79fb      	ldrb	r3, [r7, #7]
 81003d4:	2b00      	cmp	r3, #0
 81003d6:	d009      	beq.n	81003ec <BSP_LED_Toggle+0x28>
 81003d8:	79fb      	ldrb	r3, [r7, #7]
 81003da:	2b01      	cmp	r3, #1
 81003dc:	d006      	beq.n	81003ec <BSP_LED_Toggle+0x28>
 81003de:	79fb      	ldrb	r3, [r7, #7]
 81003e0:	2b02      	cmp	r3, #2
 81003e2:	d003      	beq.n	81003ec <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 81003e4:	f06f 0301 	mvn.w	r3, #1
 81003e8:	60fb      	str	r3, [r7, #12]
 81003ea:	e00b      	b.n	8100404 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 81003ec:	79fb      	ldrb	r3, [r7, #7]
 81003ee:	4a08      	ldr	r2, [pc, #32]	; (8100410 <BSP_LED_Toggle+0x4c>)
 81003f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81003f4:	79fb      	ldrb	r3, [r7, #7]
 81003f6:	4907      	ldr	r1, [pc, #28]	; (8100414 <BSP_LED_Toggle+0x50>)
 81003f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 81003fc:	4619      	mov	r1, r3
 81003fe:	4610      	mov	r0, r2
 8100400:	f000 fbc3 	bl	8100b8a <HAL_GPIO_TogglePin>
  }

  return ret;
 8100404:	68fb      	ldr	r3, [r7, #12]
}
 8100406:	4618      	mov	r0, r3
 8100408:	3710      	adds	r7, #16
 810040a:	46bd      	mov	sp, r7
 810040c:	bd80      	pop	{r7, pc}
 810040e:	bf00      	nop
 8100410:	10000000 	.word	0x10000000
 8100414:	081011ec 	.word	0x081011ec

08100418 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100418:	b480      	push	{r7}
 810041a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810041c:	4b0b      	ldr	r3, [pc, #44]	; (810044c <SystemInit+0x34>)
 810041e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100422:	4a0a      	ldr	r2, [pc, #40]	; (810044c <SystemInit+0x34>)
 8100424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810042c:	4b07      	ldr	r3, [pc, #28]	; (810044c <SystemInit+0x34>)
 810042e:	691b      	ldr	r3, [r3, #16]
 8100430:	4a06      	ldr	r2, [pc, #24]	; (810044c <SystemInit+0x34>)
 8100432:	f043 0310 	orr.w	r3, r3, #16
 8100436:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100438:	4b04      	ldr	r3, [pc, #16]	; (810044c <SystemInit+0x34>)
 810043a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810043e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 8100440:	bf00      	nop
 8100442:	46bd      	mov	sp, r7
 8100444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100448:	4770      	bx	lr
 810044a:	bf00      	nop
 810044c:	e000ed00 	.word	0xe000ed00

08100450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100450:	b580      	push	{r7, lr}
 8100452:	b082      	sub	sp, #8
 8100454:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100456:	4b28      	ldr	r3, [pc, #160]	; (81004f8 <HAL_Init+0xa8>)
 8100458:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810045c:	4a26      	ldr	r2, [pc, #152]	; (81004f8 <HAL_Init+0xa8>)
 810045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100462:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100466:	4b24      	ldr	r3, [pc, #144]	; (81004f8 <HAL_Init+0xa8>)
 8100468:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810046c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100470:	603b      	str	r3, [r7, #0]
 8100472:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100474:	4b21      	ldr	r3, [pc, #132]	; (81004fc <HAL_Init+0xac>)
 8100476:	681b      	ldr	r3, [r3, #0]
 8100478:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810047c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100480:	4a1e      	ldr	r2, [pc, #120]	; (81004fc <HAL_Init+0xac>)
 8100482:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100486:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100488:	4b1c      	ldr	r3, [pc, #112]	; (81004fc <HAL_Init+0xac>)
 810048a:	681b      	ldr	r3, [r3, #0]
 810048c:	4a1b      	ldr	r2, [pc, #108]	; (81004fc <HAL_Init+0xac>)
 810048e:	f043 0301 	orr.w	r3, r3, #1
 8100492:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100494:	2003      	movs	r0, #3
 8100496:	f000 f95b 	bl	8100750 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810049a:	f000 fc45 	bl	8100d28 <HAL_RCC_GetSysClockFreq>
 810049e:	4602      	mov	r2, r0
 81004a0:	4b15      	ldr	r3, [pc, #84]	; (81004f8 <HAL_Init+0xa8>)
 81004a2:	699b      	ldr	r3, [r3, #24]
 81004a4:	0a1b      	lsrs	r3, r3, #8
 81004a6:	f003 030f 	and.w	r3, r3, #15
 81004aa:	4915      	ldr	r1, [pc, #84]	; (8100500 <HAL_Init+0xb0>)
 81004ac:	5ccb      	ldrb	r3, [r1, r3]
 81004ae:	f003 031f 	and.w	r3, r3, #31
 81004b2:	fa22 f303 	lsr.w	r3, r2, r3
 81004b6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81004b8:	4b0f      	ldr	r3, [pc, #60]	; (81004f8 <HAL_Init+0xa8>)
 81004ba:	699b      	ldr	r3, [r3, #24]
 81004bc:	f003 030f 	and.w	r3, r3, #15
 81004c0:	4a0f      	ldr	r2, [pc, #60]	; (8100500 <HAL_Init+0xb0>)
 81004c2:	5cd3      	ldrb	r3, [r2, r3]
 81004c4:	f003 031f 	and.w	r3, r3, #31
 81004c8:	687a      	ldr	r2, [r7, #4]
 81004ca:	fa22 f303 	lsr.w	r3, r2, r3
 81004ce:	4a0d      	ldr	r2, [pc, #52]	; (8100504 <HAL_Init+0xb4>)
 81004d0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81004d2:	4b0c      	ldr	r3, [pc, #48]	; (8100504 <HAL_Init+0xb4>)
 81004d4:	681b      	ldr	r3, [r3, #0]
 81004d6:	4a0c      	ldr	r2, [pc, #48]	; (8100508 <HAL_Init+0xb8>)
 81004d8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81004da:	200f      	movs	r0, #15
 81004dc:	f000 f81e 	bl	810051c <HAL_InitTick>
 81004e0:	4603      	mov	r3, r0
 81004e2:	2b00      	cmp	r3, #0
 81004e4:	d001      	beq.n	81004ea <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81004e6:	2301      	movs	r3, #1
 81004e8:	e002      	b.n	81004f0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81004ea:	f000 f80f 	bl	810050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81004ee:	2300      	movs	r3, #0
}
 81004f0:	4618      	mov	r0, r3
 81004f2:	3708      	adds	r7, #8
 81004f4:	46bd      	mov	sp, r7
 81004f6:	bd80      	pop	{r7, pc}
 81004f8:	58024400 	.word	0x58024400
 81004fc:	40024400 	.word	0x40024400
 8100500:	081011f4 	.word	0x081011f4
 8100504:	10000010 	.word	0x10000010
 8100508:	1000000c 	.word	0x1000000c

0810050c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 810050c:	b480      	push	{r7}
 810050e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8100510:	bf00      	nop
 8100512:	46bd      	mov	sp, r7
 8100514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100518:	4770      	bx	lr
	...

0810051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810051c:	b580      	push	{r7, lr}
 810051e:	b082      	sub	sp, #8
 8100520:	af00      	add	r7, sp, #0
 8100522:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100524:	4b15      	ldr	r3, [pc, #84]	; (810057c <HAL_InitTick+0x60>)
 8100526:	781b      	ldrb	r3, [r3, #0]
 8100528:	2b00      	cmp	r3, #0
 810052a:	d101      	bne.n	8100530 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810052c:	2301      	movs	r3, #1
 810052e:	e021      	b.n	8100574 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100530:	4b13      	ldr	r3, [pc, #76]	; (8100580 <HAL_InitTick+0x64>)
 8100532:	681a      	ldr	r2, [r3, #0]
 8100534:	4b11      	ldr	r3, [pc, #68]	; (810057c <HAL_InitTick+0x60>)
 8100536:	781b      	ldrb	r3, [r3, #0]
 8100538:	4619      	mov	r1, r3
 810053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810053e:	fbb3 f3f1 	udiv	r3, r3, r1
 8100542:	fbb2 f3f3 	udiv	r3, r2, r3
 8100546:	4618      	mov	r0, r3
 8100548:	f000 f935 	bl	81007b6 <HAL_SYSTICK_Config>
 810054c:	4603      	mov	r3, r0
 810054e:	2b00      	cmp	r3, #0
 8100550:	d001      	beq.n	8100556 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100552:	2301      	movs	r3, #1
 8100554:	e00e      	b.n	8100574 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100556:	687b      	ldr	r3, [r7, #4]
 8100558:	2b0f      	cmp	r3, #15
 810055a:	d80a      	bhi.n	8100572 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810055c:	2200      	movs	r2, #0
 810055e:	6879      	ldr	r1, [r7, #4]
 8100560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100564:	f000 f8ff 	bl	8100766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100568:	4a06      	ldr	r2, [pc, #24]	; (8100584 <HAL_InitTick+0x68>)
 810056a:	687b      	ldr	r3, [r7, #4]
 810056c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810056e:	2300      	movs	r3, #0
 8100570:	e000      	b.n	8100574 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100572:	2301      	movs	r3, #1
}
 8100574:	4618      	mov	r0, r3
 8100576:	3708      	adds	r7, #8
 8100578:	46bd      	mov	sp, r7
 810057a:	bd80      	pop	{r7, pc}
 810057c:	10000018 	.word	0x10000018
 8100580:	1000000c 	.word	0x1000000c
 8100584:	10000014 	.word	0x10000014

08100588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100588:	b480      	push	{r7}
 810058a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810058c:	4b06      	ldr	r3, [pc, #24]	; (81005a8 <HAL_IncTick+0x20>)
 810058e:	781b      	ldrb	r3, [r3, #0]
 8100590:	461a      	mov	r2, r3
 8100592:	4b06      	ldr	r3, [pc, #24]	; (81005ac <HAL_IncTick+0x24>)
 8100594:	681b      	ldr	r3, [r3, #0]
 8100596:	4413      	add	r3, r2
 8100598:	4a04      	ldr	r2, [pc, #16]	; (81005ac <HAL_IncTick+0x24>)
 810059a:	6013      	str	r3, [r2, #0]
}
 810059c:	bf00      	nop
 810059e:	46bd      	mov	sp, r7
 81005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005a4:	4770      	bx	lr
 81005a6:	bf00      	nop
 81005a8:	10000018 	.word	0x10000018
 81005ac:	10000038 	.word	0x10000038

081005b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81005b0:	b480      	push	{r7}
 81005b2:	b085      	sub	sp, #20
 81005b4:	af00      	add	r7, sp, #0
 81005b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81005b8:	687b      	ldr	r3, [r7, #4]
 81005ba:	f003 0307 	and.w	r3, r3, #7
 81005be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81005c0:	4b0c      	ldr	r3, [pc, #48]	; (81005f4 <__NVIC_SetPriorityGrouping+0x44>)
 81005c2:	68db      	ldr	r3, [r3, #12]
 81005c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81005c6:	68ba      	ldr	r2, [r7, #8]
 81005c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81005cc:	4013      	ands	r3, r2
 81005ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81005d0:	68fb      	ldr	r3, [r7, #12]
 81005d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81005d4:	68bb      	ldr	r3, [r7, #8]
 81005d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81005d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81005dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81005e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81005e2:	4a04      	ldr	r2, [pc, #16]	; (81005f4 <__NVIC_SetPriorityGrouping+0x44>)
 81005e4:	68bb      	ldr	r3, [r7, #8]
 81005e6:	60d3      	str	r3, [r2, #12]
}
 81005e8:	bf00      	nop
 81005ea:	3714      	adds	r7, #20
 81005ec:	46bd      	mov	sp, r7
 81005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f2:	4770      	bx	lr
 81005f4:	e000ed00 	.word	0xe000ed00

081005f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81005f8:	b480      	push	{r7}
 81005fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81005fc:	4b04      	ldr	r3, [pc, #16]	; (8100610 <__NVIC_GetPriorityGrouping+0x18>)
 81005fe:	68db      	ldr	r3, [r3, #12]
 8100600:	0a1b      	lsrs	r3, r3, #8
 8100602:	f003 0307 	and.w	r3, r3, #7
}
 8100606:	4618      	mov	r0, r3
 8100608:	46bd      	mov	sp, r7
 810060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810060e:	4770      	bx	lr
 8100610:	e000ed00 	.word	0xe000ed00

08100614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100614:	b480      	push	{r7}
 8100616:	b083      	sub	sp, #12
 8100618:	af00      	add	r7, sp, #0
 810061a:	4603      	mov	r3, r0
 810061c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810061e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100622:	2b00      	cmp	r3, #0
 8100624:	db0b      	blt.n	810063e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100626:	88fb      	ldrh	r3, [r7, #6]
 8100628:	f003 021f 	and.w	r2, r3, #31
 810062c:	4907      	ldr	r1, [pc, #28]	; (810064c <__NVIC_EnableIRQ+0x38>)
 810062e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100632:	095b      	lsrs	r3, r3, #5
 8100634:	2001      	movs	r0, #1
 8100636:	fa00 f202 	lsl.w	r2, r0, r2
 810063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810063e:	bf00      	nop
 8100640:	370c      	adds	r7, #12
 8100642:	46bd      	mov	sp, r7
 8100644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100648:	4770      	bx	lr
 810064a:	bf00      	nop
 810064c:	e000e100 	.word	0xe000e100

08100650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100650:	b480      	push	{r7}
 8100652:	b083      	sub	sp, #12
 8100654:	af00      	add	r7, sp, #0
 8100656:	4603      	mov	r3, r0
 8100658:	6039      	str	r1, [r7, #0]
 810065a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810065c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100660:	2b00      	cmp	r3, #0
 8100662:	db0a      	blt.n	810067a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100664:	683b      	ldr	r3, [r7, #0]
 8100666:	b2da      	uxtb	r2, r3
 8100668:	490c      	ldr	r1, [pc, #48]	; (810069c <__NVIC_SetPriority+0x4c>)
 810066a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810066e:	0112      	lsls	r2, r2, #4
 8100670:	b2d2      	uxtb	r2, r2
 8100672:	440b      	add	r3, r1
 8100674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100678:	e00a      	b.n	8100690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810067a:	683b      	ldr	r3, [r7, #0]
 810067c:	b2da      	uxtb	r2, r3
 810067e:	4908      	ldr	r1, [pc, #32]	; (81006a0 <__NVIC_SetPriority+0x50>)
 8100680:	88fb      	ldrh	r3, [r7, #6]
 8100682:	f003 030f 	and.w	r3, r3, #15
 8100686:	3b04      	subs	r3, #4
 8100688:	0112      	lsls	r2, r2, #4
 810068a:	b2d2      	uxtb	r2, r2
 810068c:	440b      	add	r3, r1
 810068e:	761a      	strb	r2, [r3, #24]
}
 8100690:	bf00      	nop
 8100692:	370c      	adds	r7, #12
 8100694:	46bd      	mov	sp, r7
 8100696:	f85d 7b04 	ldr.w	r7, [sp], #4
 810069a:	4770      	bx	lr
 810069c:	e000e100 	.word	0xe000e100
 81006a0:	e000ed00 	.word	0xe000ed00

081006a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81006a4:	b480      	push	{r7}
 81006a6:	b089      	sub	sp, #36	; 0x24
 81006a8:	af00      	add	r7, sp, #0
 81006aa:	60f8      	str	r0, [r7, #12]
 81006ac:	60b9      	str	r1, [r7, #8]
 81006ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81006b0:	68fb      	ldr	r3, [r7, #12]
 81006b2:	f003 0307 	and.w	r3, r3, #7
 81006b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81006b8:	69fb      	ldr	r3, [r7, #28]
 81006ba:	f1c3 0307 	rsb	r3, r3, #7
 81006be:	2b04      	cmp	r3, #4
 81006c0:	bf28      	it	cs
 81006c2:	2304      	movcs	r3, #4
 81006c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81006c6:	69fb      	ldr	r3, [r7, #28]
 81006c8:	3304      	adds	r3, #4
 81006ca:	2b06      	cmp	r3, #6
 81006cc:	d902      	bls.n	81006d4 <NVIC_EncodePriority+0x30>
 81006ce:	69fb      	ldr	r3, [r7, #28]
 81006d0:	3b03      	subs	r3, #3
 81006d2:	e000      	b.n	81006d6 <NVIC_EncodePriority+0x32>
 81006d4:	2300      	movs	r3, #0
 81006d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81006d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81006dc:	69bb      	ldr	r3, [r7, #24]
 81006de:	fa02 f303 	lsl.w	r3, r2, r3
 81006e2:	43da      	mvns	r2, r3
 81006e4:	68bb      	ldr	r3, [r7, #8]
 81006e6:	401a      	ands	r2, r3
 81006e8:	697b      	ldr	r3, [r7, #20]
 81006ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81006ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81006f0:	697b      	ldr	r3, [r7, #20]
 81006f2:	fa01 f303 	lsl.w	r3, r1, r3
 81006f6:	43d9      	mvns	r1, r3
 81006f8:	687b      	ldr	r3, [r7, #4]
 81006fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81006fc:	4313      	orrs	r3, r2
         );
}
 81006fe:	4618      	mov	r0, r3
 8100700:	3724      	adds	r7, #36	; 0x24
 8100702:	46bd      	mov	sp, r7
 8100704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100708:	4770      	bx	lr
	...

0810070c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810070c:	b580      	push	{r7, lr}
 810070e:	b082      	sub	sp, #8
 8100710:	af00      	add	r7, sp, #0
 8100712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100714:	687b      	ldr	r3, [r7, #4]
 8100716:	3b01      	subs	r3, #1
 8100718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810071c:	d301      	bcc.n	8100722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810071e:	2301      	movs	r3, #1
 8100720:	e00f      	b.n	8100742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100722:	4a0a      	ldr	r2, [pc, #40]	; (810074c <SysTick_Config+0x40>)
 8100724:	687b      	ldr	r3, [r7, #4]
 8100726:	3b01      	subs	r3, #1
 8100728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810072a:	210f      	movs	r1, #15
 810072c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100730:	f7ff ff8e 	bl	8100650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100734:	4b05      	ldr	r3, [pc, #20]	; (810074c <SysTick_Config+0x40>)
 8100736:	2200      	movs	r2, #0
 8100738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810073a:	4b04      	ldr	r3, [pc, #16]	; (810074c <SysTick_Config+0x40>)
 810073c:	2207      	movs	r2, #7
 810073e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100740:	2300      	movs	r3, #0
}
 8100742:	4618      	mov	r0, r3
 8100744:	3708      	adds	r7, #8
 8100746:	46bd      	mov	sp, r7
 8100748:	bd80      	pop	{r7, pc}
 810074a:	bf00      	nop
 810074c:	e000e010 	.word	0xe000e010

08100750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100750:	b580      	push	{r7, lr}
 8100752:	b082      	sub	sp, #8
 8100754:	af00      	add	r7, sp, #0
 8100756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100758:	6878      	ldr	r0, [r7, #4]
 810075a:	f7ff ff29 	bl	81005b0 <__NVIC_SetPriorityGrouping>
}
 810075e:	bf00      	nop
 8100760:	3708      	adds	r7, #8
 8100762:	46bd      	mov	sp, r7
 8100764:	bd80      	pop	{r7, pc}

08100766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100766:	b580      	push	{r7, lr}
 8100768:	b086      	sub	sp, #24
 810076a:	af00      	add	r7, sp, #0
 810076c:	4603      	mov	r3, r0
 810076e:	60b9      	str	r1, [r7, #8]
 8100770:	607a      	str	r2, [r7, #4]
 8100772:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100774:	f7ff ff40 	bl	81005f8 <__NVIC_GetPriorityGrouping>
 8100778:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810077a:	687a      	ldr	r2, [r7, #4]
 810077c:	68b9      	ldr	r1, [r7, #8]
 810077e:	6978      	ldr	r0, [r7, #20]
 8100780:	f7ff ff90 	bl	81006a4 <NVIC_EncodePriority>
 8100784:	4602      	mov	r2, r0
 8100786:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810078a:	4611      	mov	r1, r2
 810078c:	4618      	mov	r0, r3
 810078e:	f7ff ff5f 	bl	8100650 <__NVIC_SetPriority>
}
 8100792:	bf00      	nop
 8100794:	3718      	adds	r7, #24
 8100796:	46bd      	mov	sp, r7
 8100798:	bd80      	pop	{r7, pc}

0810079a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810079a:	b580      	push	{r7, lr}
 810079c:	b082      	sub	sp, #8
 810079e:	af00      	add	r7, sp, #0
 81007a0:	4603      	mov	r3, r0
 81007a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81007a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007a8:	4618      	mov	r0, r3
 81007aa:	f7ff ff33 	bl	8100614 <__NVIC_EnableIRQ>
}
 81007ae:	bf00      	nop
 81007b0:	3708      	adds	r7, #8
 81007b2:	46bd      	mov	sp, r7
 81007b4:	bd80      	pop	{r7, pc}

081007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81007b6:	b580      	push	{r7, lr}
 81007b8:	b082      	sub	sp, #8
 81007ba:	af00      	add	r7, sp, #0
 81007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81007be:	6878      	ldr	r0, [r7, #4]
 81007c0:	f7ff ffa4 	bl	810070c <SysTick_Config>
 81007c4:	4603      	mov	r3, r0
}
 81007c6:	4618      	mov	r0, r3
 81007c8:	3708      	adds	r7, #8
 81007ca:	46bd      	mov	sp, r7
 81007cc:	bd80      	pop	{r7, pc}
	...

081007d0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81007d0:	b480      	push	{r7}
 81007d2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81007d4:	4b07      	ldr	r3, [pc, #28]	; (81007f4 <HAL_GetCurrentCPUID+0x24>)
 81007d6:	681b      	ldr	r3, [r3, #0]
 81007d8:	091b      	lsrs	r3, r3, #4
 81007da:	f003 030f 	and.w	r3, r3, #15
 81007de:	2b07      	cmp	r3, #7
 81007e0:	d101      	bne.n	81007e6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81007e2:	2303      	movs	r3, #3
 81007e4:	e000      	b.n	81007e8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81007e6:	2301      	movs	r3, #1
  }
}
 81007e8:	4618      	mov	r0, r3
 81007ea:	46bd      	mov	sp, r7
 81007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007f0:	4770      	bx	lr
 81007f2:	bf00      	nop
 81007f4:	e000ed00 	.word	0xe000ed00

081007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81007f8:	b480      	push	{r7}
 81007fa:	b089      	sub	sp, #36	; 0x24
 81007fc:	af00      	add	r7, sp, #0
 81007fe:	6078      	str	r0, [r7, #4]
 8100800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100802:	2300      	movs	r3, #0
 8100804:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100806:	4b89      	ldr	r3, [pc, #548]	; (8100a2c <HAL_GPIO_Init+0x234>)
 8100808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810080a:	e194      	b.n	8100b36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810080c:	683b      	ldr	r3, [r7, #0]
 810080e:	681a      	ldr	r2, [r3, #0]
 8100810:	2101      	movs	r1, #1
 8100812:	69fb      	ldr	r3, [r7, #28]
 8100814:	fa01 f303 	lsl.w	r3, r1, r3
 8100818:	4013      	ands	r3, r2
 810081a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810081c:	693b      	ldr	r3, [r7, #16]
 810081e:	2b00      	cmp	r3, #0
 8100820:	f000 8186 	beq.w	8100b30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100824:	683b      	ldr	r3, [r7, #0]
 8100826:	685b      	ldr	r3, [r3, #4]
 8100828:	f003 0303 	and.w	r3, r3, #3
 810082c:	2b01      	cmp	r3, #1
 810082e:	d005      	beq.n	810083c <HAL_GPIO_Init+0x44>
 8100830:	683b      	ldr	r3, [r7, #0]
 8100832:	685b      	ldr	r3, [r3, #4]
 8100834:	f003 0303 	and.w	r3, r3, #3
 8100838:	2b02      	cmp	r3, #2
 810083a:	d130      	bne.n	810089e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810083c:	687b      	ldr	r3, [r7, #4]
 810083e:	689b      	ldr	r3, [r3, #8]
 8100840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100842:	69fb      	ldr	r3, [r7, #28]
 8100844:	005b      	lsls	r3, r3, #1
 8100846:	2203      	movs	r2, #3
 8100848:	fa02 f303 	lsl.w	r3, r2, r3
 810084c:	43db      	mvns	r3, r3
 810084e:	69ba      	ldr	r2, [r7, #24]
 8100850:	4013      	ands	r3, r2
 8100852:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100854:	683b      	ldr	r3, [r7, #0]
 8100856:	68da      	ldr	r2, [r3, #12]
 8100858:	69fb      	ldr	r3, [r7, #28]
 810085a:	005b      	lsls	r3, r3, #1
 810085c:	fa02 f303 	lsl.w	r3, r2, r3
 8100860:	69ba      	ldr	r2, [r7, #24]
 8100862:	4313      	orrs	r3, r2
 8100864:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100866:	687b      	ldr	r3, [r7, #4]
 8100868:	69ba      	ldr	r2, [r7, #24]
 810086a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810086c:	687b      	ldr	r3, [r7, #4]
 810086e:	685b      	ldr	r3, [r3, #4]
 8100870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100872:	2201      	movs	r2, #1
 8100874:	69fb      	ldr	r3, [r7, #28]
 8100876:	fa02 f303 	lsl.w	r3, r2, r3
 810087a:	43db      	mvns	r3, r3
 810087c:	69ba      	ldr	r2, [r7, #24]
 810087e:	4013      	ands	r3, r2
 8100880:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100882:	683b      	ldr	r3, [r7, #0]
 8100884:	685b      	ldr	r3, [r3, #4]
 8100886:	091b      	lsrs	r3, r3, #4
 8100888:	f003 0201 	and.w	r2, r3, #1
 810088c:	69fb      	ldr	r3, [r7, #28]
 810088e:	fa02 f303 	lsl.w	r3, r2, r3
 8100892:	69ba      	ldr	r2, [r7, #24]
 8100894:	4313      	orrs	r3, r2
 8100896:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100898:	687b      	ldr	r3, [r7, #4]
 810089a:	69ba      	ldr	r2, [r7, #24]
 810089c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810089e:	683b      	ldr	r3, [r7, #0]
 81008a0:	685b      	ldr	r3, [r3, #4]
 81008a2:	f003 0303 	and.w	r3, r3, #3
 81008a6:	2b03      	cmp	r3, #3
 81008a8:	d017      	beq.n	81008da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81008aa:	687b      	ldr	r3, [r7, #4]
 81008ac:	68db      	ldr	r3, [r3, #12]
 81008ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81008b0:	69fb      	ldr	r3, [r7, #28]
 81008b2:	005b      	lsls	r3, r3, #1
 81008b4:	2203      	movs	r2, #3
 81008b6:	fa02 f303 	lsl.w	r3, r2, r3
 81008ba:	43db      	mvns	r3, r3
 81008bc:	69ba      	ldr	r2, [r7, #24]
 81008be:	4013      	ands	r3, r2
 81008c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81008c2:	683b      	ldr	r3, [r7, #0]
 81008c4:	689a      	ldr	r2, [r3, #8]
 81008c6:	69fb      	ldr	r3, [r7, #28]
 81008c8:	005b      	lsls	r3, r3, #1
 81008ca:	fa02 f303 	lsl.w	r3, r2, r3
 81008ce:	69ba      	ldr	r2, [r7, #24]
 81008d0:	4313      	orrs	r3, r2
 81008d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81008d4:	687b      	ldr	r3, [r7, #4]
 81008d6:	69ba      	ldr	r2, [r7, #24]
 81008d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81008da:	683b      	ldr	r3, [r7, #0]
 81008dc:	685b      	ldr	r3, [r3, #4]
 81008de:	f003 0303 	and.w	r3, r3, #3
 81008e2:	2b02      	cmp	r3, #2
 81008e4:	d123      	bne.n	810092e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81008e6:	69fb      	ldr	r3, [r7, #28]
 81008e8:	08da      	lsrs	r2, r3, #3
 81008ea:	687b      	ldr	r3, [r7, #4]
 81008ec:	3208      	adds	r2, #8
 81008ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81008f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81008f4:	69fb      	ldr	r3, [r7, #28]
 81008f6:	f003 0307 	and.w	r3, r3, #7
 81008fa:	009b      	lsls	r3, r3, #2
 81008fc:	220f      	movs	r2, #15
 81008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8100902:	43db      	mvns	r3, r3
 8100904:	69ba      	ldr	r2, [r7, #24]
 8100906:	4013      	ands	r3, r2
 8100908:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810090a:	683b      	ldr	r3, [r7, #0]
 810090c:	691a      	ldr	r2, [r3, #16]
 810090e:	69fb      	ldr	r3, [r7, #28]
 8100910:	f003 0307 	and.w	r3, r3, #7
 8100914:	009b      	lsls	r3, r3, #2
 8100916:	fa02 f303 	lsl.w	r3, r2, r3
 810091a:	69ba      	ldr	r2, [r7, #24]
 810091c:	4313      	orrs	r3, r2
 810091e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100920:	69fb      	ldr	r3, [r7, #28]
 8100922:	08da      	lsrs	r2, r3, #3
 8100924:	687b      	ldr	r3, [r7, #4]
 8100926:	3208      	adds	r2, #8
 8100928:	69b9      	ldr	r1, [r7, #24]
 810092a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810092e:	687b      	ldr	r3, [r7, #4]
 8100930:	681b      	ldr	r3, [r3, #0]
 8100932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100934:	69fb      	ldr	r3, [r7, #28]
 8100936:	005b      	lsls	r3, r3, #1
 8100938:	2203      	movs	r2, #3
 810093a:	fa02 f303 	lsl.w	r3, r2, r3
 810093e:	43db      	mvns	r3, r3
 8100940:	69ba      	ldr	r2, [r7, #24]
 8100942:	4013      	ands	r3, r2
 8100944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100946:	683b      	ldr	r3, [r7, #0]
 8100948:	685b      	ldr	r3, [r3, #4]
 810094a:	f003 0203 	and.w	r2, r3, #3
 810094e:	69fb      	ldr	r3, [r7, #28]
 8100950:	005b      	lsls	r3, r3, #1
 8100952:	fa02 f303 	lsl.w	r3, r2, r3
 8100956:	69ba      	ldr	r2, [r7, #24]
 8100958:	4313      	orrs	r3, r2
 810095a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810095c:	687b      	ldr	r3, [r7, #4]
 810095e:	69ba      	ldr	r2, [r7, #24]
 8100960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100962:	683b      	ldr	r3, [r7, #0]
 8100964:	685b      	ldr	r3, [r3, #4]
 8100966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810096a:	2b00      	cmp	r3, #0
 810096c:	f000 80e0 	beq.w	8100b30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100970:	4b2f      	ldr	r3, [pc, #188]	; (8100a30 <HAL_GPIO_Init+0x238>)
 8100972:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100976:	4a2e      	ldr	r2, [pc, #184]	; (8100a30 <HAL_GPIO_Init+0x238>)
 8100978:	f043 0302 	orr.w	r3, r3, #2
 810097c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100980:	4b2b      	ldr	r3, [pc, #172]	; (8100a30 <HAL_GPIO_Init+0x238>)
 8100982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100986:	f003 0302 	and.w	r3, r3, #2
 810098a:	60fb      	str	r3, [r7, #12]
 810098c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810098e:	4a29      	ldr	r2, [pc, #164]	; (8100a34 <HAL_GPIO_Init+0x23c>)
 8100990:	69fb      	ldr	r3, [r7, #28]
 8100992:	089b      	lsrs	r3, r3, #2
 8100994:	3302      	adds	r3, #2
 8100996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810099a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810099c:	69fb      	ldr	r3, [r7, #28]
 810099e:	f003 0303 	and.w	r3, r3, #3
 81009a2:	009b      	lsls	r3, r3, #2
 81009a4:	220f      	movs	r2, #15
 81009a6:	fa02 f303 	lsl.w	r3, r2, r3
 81009aa:	43db      	mvns	r3, r3
 81009ac:	69ba      	ldr	r2, [r7, #24]
 81009ae:	4013      	ands	r3, r2
 81009b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81009b2:	687b      	ldr	r3, [r7, #4]
 81009b4:	4a20      	ldr	r2, [pc, #128]	; (8100a38 <HAL_GPIO_Init+0x240>)
 81009b6:	4293      	cmp	r3, r2
 81009b8:	d052      	beq.n	8100a60 <HAL_GPIO_Init+0x268>
 81009ba:	687b      	ldr	r3, [r7, #4]
 81009bc:	4a1f      	ldr	r2, [pc, #124]	; (8100a3c <HAL_GPIO_Init+0x244>)
 81009be:	4293      	cmp	r3, r2
 81009c0:	d031      	beq.n	8100a26 <HAL_GPIO_Init+0x22e>
 81009c2:	687b      	ldr	r3, [r7, #4]
 81009c4:	4a1e      	ldr	r2, [pc, #120]	; (8100a40 <HAL_GPIO_Init+0x248>)
 81009c6:	4293      	cmp	r3, r2
 81009c8:	d02b      	beq.n	8100a22 <HAL_GPIO_Init+0x22a>
 81009ca:	687b      	ldr	r3, [r7, #4]
 81009cc:	4a1d      	ldr	r2, [pc, #116]	; (8100a44 <HAL_GPIO_Init+0x24c>)
 81009ce:	4293      	cmp	r3, r2
 81009d0:	d025      	beq.n	8100a1e <HAL_GPIO_Init+0x226>
 81009d2:	687b      	ldr	r3, [r7, #4]
 81009d4:	4a1c      	ldr	r2, [pc, #112]	; (8100a48 <HAL_GPIO_Init+0x250>)
 81009d6:	4293      	cmp	r3, r2
 81009d8:	d01f      	beq.n	8100a1a <HAL_GPIO_Init+0x222>
 81009da:	687b      	ldr	r3, [r7, #4]
 81009dc:	4a1b      	ldr	r2, [pc, #108]	; (8100a4c <HAL_GPIO_Init+0x254>)
 81009de:	4293      	cmp	r3, r2
 81009e0:	d019      	beq.n	8100a16 <HAL_GPIO_Init+0x21e>
 81009e2:	687b      	ldr	r3, [r7, #4]
 81009e4:	4a1a      	ldr	r2, [pc, #104]	; (8100a50 <HAL_GPIO_Init+0x258>)
 81009e6:	4293      	cmp	r3, r2
 81009e8:	d013      	beq.n	8100a12 <HAL_GPIO_Init+0x21a>
 81009ea:	687b      	ldr	r3, [r7, #4]
 81009ec:	4a19      	ldr	r2, [pc, #100]	; (8100a54 <HAL_GPIO_Init+0x25c>)
 81009ee:	4293      	cmp	r3, r2
 81009f0:	d00d      	beq.n	8100a0e <HAL_GPIO_Init+0x216>
 81009f2:	687b      	ldr	r3, [r7, #4]
 81009f4:	4a18      	ldr	r2, [pc, #96]	; (8100a58 <HAL_GPIO_Init+0x260>)
 81009f6:	4293      	cmp	r3, r2
 81009f8:	d007      	beq.n	8100a0a <HAL_GPIO_Init+0x212>
 81009fa:	687b      	ldr	r3, [r7, #4]
 81009fc:	4a17      	ldr	r2, [pc, #92]	; (8100a5c <HAL_GPIO_Init+0x264>)
 81009fe:	4293      	cmp	r3, r2
 8100a00:	d101      	bne.n	8100a06 <HAL_GPIO_Init+0x20e>
 8100a02:	2309      	movs	r3, #9
 8100a04:	e02d      	b.n	8100a62 <HAL_GPIO_Init+0x26a>
 8100a06:	230a      	movs	r3, #10
 8100a08:	e02b      	b.n	8100a62 <HAL_GPIO_Init+0x26a>
 8100a0a:	2308      	movs	r3, #8
 8100a0c:	e029      	b.n	8100a62 <HAL_GPIO_Init+0x26a>
 8100a0e:	2307      	movs	r3, #7
 8100a10:	e027      	b.n	8100a62 <HAL_GPIO_Init+0x26a>
 8100a12:	2306      	movs	r3, #6
 8100a14:	e025      	b.n	8100a62 <HAL_GPIO_Init+0x26a>
 8100a16:	2305      	movs	r3, #5
 8100a18:	e023      	b.n	8100a62 <HAL_GPIO_Init+0x26a>
 8100a1a:	2304      	movs	r3, #4
 8100a1c:	e021      	b.n	8100a62 <HAL_GPIO_Init+0x26a>
 8100a1e:	2303      	movs	r3, #3
 8100a20:	e01f      	b.n	8100a62 <HAL_GPIO_Init+0x26a>
 8100a22:	2302      	movs	r3, #2
 8100a24:	e01d      	b.n	8100a62 <HAL_GPIO_Init+0x26a>
 8100a26:	2301      	movs	r3, #1
 8100a28:	e01b      	b.n	8100a62 <HAL_GPIO_Init+0x26a>
 8100a2a:	bf00      	nop
 8100a2c:	580000c0 	.word	0x580000c0
 8100a30:	58024400 	.word	0x58024400
 8100a34:	58000400 	.word	0x58000400
 8100a38:	58020000 	.word	0x58020000
 8100a3c:	58020400 	.word	0x58020400
 8100a40:	58020800 	.word	0x58020800
 8100a44:	58020c00 	.word	0x58020c00
 8100a48:	58021000 	.word	0x58021000
 8100a4c:	58021400 	.word	0x58021400
 8100a50:	58021800 	.word	0x58021800
 8100a54:	58021c00 	.word	0x58021c00
 8100a58:	58022000 	.word	0x58022000
 8100a5c:	58022400 	.word	0x58022400
 8100a60:	2300      	movs	r3, #0
 8100a62:	69fa      	ldr	r2, [r7, #28]
 8100a64:	f002 0203 	and.w	r2, r2, #3
 8100a68:	0092      	lsls	r2, r2, #2
 8100a6a:	4093      	lsls	r3, r2
 8100a6c:	69ba      	ldr	r2, [r7, #24]
 8100a6e:	4313      	orrs	r3, r2
 8100a70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100a72:	4938      	ldr	r1, [pc, #224]	; (8100b54 <HAL_GPIO_Init+0x35c>)
 8100a74:	69fb      	ldr	r3, [r7, #28]
 8100a76:	089b      	lsrs	r3, r3, #2
 8100a78:	3302      	adds	r3, #2
 8100a7a:	69ba      	ldr	r2, [r7, #24]
 8100a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100a84:	681b      	ldr	r3, [r3, #0]
 8100a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100a88:	693b      	ldr	r3, [r7, #16]
 8100a8a:	43db      	mvns	r3, r3
 8100a8c:	69ba      	ldr	r2, [r7, #24]
 8100a8e:	4013      	ands	r3, r2
 8100a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100a92:	683b      	ldr	r3, [r7, #0]
 8100a94:	685b      	ldr	r3, [r3, #4]
 8100a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100a9a:	2b00      	cmp	r3, #0
 8100a9c:	d003      	beq.n	8100aa6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100a9e:	69ba      	ldr	r2, [r7, #24]
 8100aa0:	693b      	ldr	r3, [r7, #16]
 8100aa2:	4313      	orrs	r3, r2
 8100aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100aaa:	69bb      	ldr	r3, [r7, #24]
 8100aac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100ab2:	685b      	ldr	r3, [r3, #4]
 8100ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100ab6:	693b      	ldr	r3, [r7, #16]
 8100ab8:	43db      	mvns	r3, r3
 8100aba:	69ba      	ldr	r2, [r7, #24]
 8100abc:	4013      	ands	r3, r2
 8100abe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100ac0:	683b      	ldr	r3, [r7, #0]
 8100ac2:	685b      	ldr	r3, [r3, #4]
 8100ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100ac8:	2b00      	cmp	r3, #0
 8100aca:	d003      	beq.n	8100ad4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100acc:	69ba      	ldr	r2, [r7, #24]
 8100ace:	693b      	ldr	r3, [r7, #16]
 8100ad0:	4313      	orrs	r3, r2
 8100ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100ad8:	69bb      	ldr	r3, [r7, #24]
 8100ada:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100adc:	697b      	ldr	r3, [r7, #20]
 8100ade:	685b      	ldr	r3, [r3, #4]
 8100ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100ae2:	693b      	ldr	r3, [r7, #16]
 8100ae4:	43db      	mvns	r3, r3
 8100ae6:	69ba      	ldr	r2, [r7, #24]
 8100ae8:	4013      	ands	r3, r2
 8100aea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100aec:	683b      	ldr	r3, [r7, #0]
 8100aee:	685b      	ldr	r3, [r3, #4]
 8100af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100af4:	2b00      	cmp	r3, #0
 8100af6:	d003      	beq.n	8100b00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100af8:	69ba      	ldr	r2, [r7, #24]
 8100afa:	693b      	ldr	r3, [r7, #16]
 8100afc:	4313      	orrs	r3, r2
 8100afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100b00:	697b      	ldr	r3, [r7, #20]
 8100b02:	69ba      	ldr	r2, [r7, #24]
 8100b04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100b06:	697b      	ldr	r3, [r7, #20]
 8100b08:	681b      	ldr	r3, [r3, #0]
 8100b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b0c:	693b      	ldr	r3, [r7, #16]
 8100b0e:	43db      	mvns	r3, r3
 8100b10:	69ba      	ldr	r2, [r7, #24]
 8100b12:	4013      	ands	r3, r2
 8100b14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100b16:	683b      	ldr	r3, [r7, #0]
 8100b18:	685b      	ldr	r3, [r3, #4]
 8100b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100b1e:	2b00      	cmp	r3, #0
 8100b20:	d003      	beq.n	8100b2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100b22:	69ba      	ldr	r2, [r7, #24]
 8100b24:	693b      	ldr	r3, [r7, #16]
 8100b26:	4313      	orrs	r3, r2
 8100b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100b2a:	697b      	ldr	r3, [r7, #20]
 8100b2c:	69ba      	ldr	r2, [r7, #24]
 8100b2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100b30:	69fb      	ldr	r3, [r7, #28]
 8100b32:	3301      	adds	r3, #1
 8100b34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100b36:	683b      	ldr	r3, [r7, #0]
 8100b38:	681a      	ldr	r2, [r3, #0]
 8100b3a:	69fb      	ldr	r3, [r7, #28]
 8100b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8100b40:	2b00      	cmp	r3, #0
 8100b42:	f47f ae63 	bne.w	810080c <HAL_GPIO_Init+0x14>
  }
}
 8100b46:	bf00      	nop
 8100b48:	bf00      	nop
 8100b4a:	3724      	adds	r7, #36	; 0x24
 8100b4c:	46bd      	mov	sp, r7
 8100b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b52:	4770      	bx	lr
 8100b54:	58000400 	.word	0x58000400

08100b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100b58:	b480      	push	{r7}
 8100b5a:	b083      	sub	sp, #12
 8100b5c:	af00      	add	r7, sp, #0
 8100b5e:	6078      	str	r0, [r7, #4]
 8100b60:	460b      	mov	r3, r1
 8100b62:	807b      	strh	r3, [r7, #2]
 8100b64:	4613      	mov	r3, r2
 8100b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100b68:	787b      	ldrb	r3, [r7, #1]
 8100b6a:	2b00      	cmp	r3, #0
 8100b6c:	d003      	beq.n	8100b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100b6e:	887a      	ldrh	r2, [r7, #2]
 8100b70:	687b      	ldr	r3, [r7, #4]
 8100b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100b74:	e003      	b.n	8100b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100b76:	887b      	ldrh	r3, [r7, #2]
 8100b78:	041a      	lsls	r2, r3, #16
 8100b7a:	687b      	ldr	r3, [r7, #4]
 8100b7c:	619a      	str	r2, [r3, #24]
}
 8100b7e:	bf00      	nop
 8100b80:	370c      	adds	r7, #12
 8100b82:	46bd      	mov	sp, r7
 8100b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b88:	4770      	bx	lr

08100b8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100b8a:	b480      	push	{r7}
 8100b8c:	b085      	sub	sp, #20
 8100b8e:	af00      	add	r7, sp, #0
 8100b90:	6078      	str	r0, [r7, #4]
 8100b92:	460b      	mov	r3, r1
 8100b94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100b96:	687b      	ldr	r3, [r7, #4]
 8100b98:	695b      	ldr	r3, [r3, #20]
 8100b9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100b9c:	887a      	ldrh	r2, [r7, #2]
 8100b9e:	68fb      	ldr	r3, [r7, #12]
 8100ba0:	4013      	ands	r3, r2
 8100ba2:	041a      	lsls	r2, r3, #16
 8100ba4:	68fb      	ldr	r3, [r7, #12]
 8100ba6:	43d9      	mvns	r1, r3
 8100ba8:	887b      	ldrh	r3, [r7, #2]
 8100baa:	400b      	ands	r3, r1
 8100bac:	431a      	orrs	r2, r3
 8100bae:	687b      	ldr	r3, [r7, #4]
 8100bb0:	619a      	str	r2, [r3, #24]
}
 8100bb2:	bf00      	nop
 8100bb4:	3714      	adds	r7, #20
 8100bb6:	46bd      	mov	sp, r7
 8100bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bbc:	4770      	bx	lr

08100bbe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8100bbe:	b580      	push	{r7, lr}
 8100bc0:	b082      	sub	sp, #8
 8100bc2:	af00      	add	r7, sp, #0
 8100bc4:	4603      	mov	r3, r0
 8100bc6:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8100bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100bcc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8100bd0:	88fb      	ldrh	r3, [r7, #6]
 8100bd2:	4013      	ands	r3, r2
 8100bd4:	2b00      	cmp	r3, #0
 8100bd6:	d008      	beq.n	8100bea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8100bd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100bdc:	88fb      	ldrh	r3, [r7, #6]
 8100bde:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8100be2:	88fb      	ldrh	r3, [r7, #6]
 8100be4:	4618      	mov	r0, r3
 8100be6:	f000 fa61 	bl	81010ac <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8100bea:	bf00      	nop
 8100bec:	3708      	adds	r7, #8
 8100bee:	46bd      	mov	sp, r7
 8100bf0:	bd80      	pop	{r7, pc}
	...

08100bf4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100bf4:	b480      	push	{r7}
 8100bf6:	b083      	sub	sp, #12
 8100bf8:	af00      	add	r7, sp, #0
 8100bfa:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100bfc:	4b05      	ldr	r3, [pc, #20]	; (8100c14 <HAL_HSEM_ActivateNotification+0x20>)
 8100bfe:	681a      	ldr	r2, [r3, #0]
 8100c00:	4904      	ldr	r1, [pc, #16]	; (8100c14 <HAL_HSEM_ActivateNotification+0x20>)
 8100c02:	687b      	ldr	r3, [r7, #4]
 8100c04:	4313      	orrs	r3, r2
 8100c06:	600b      	str	r3, [r1, #0]
#endif
}
 8100c08:	bf00      	nop
 8100c0a:	370c      	adds	r7, #12
 8100c0c:	46bd      	mov	sp, r7
 8100c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c12:	4770      	bx	lr
 8100c14:	58026510 	.word	0x58026510

08100c18 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100c18:	b580      	push	{r7, lr}
 8100c1a:	b084      	sub	sp, #16
 8100c1c:	af00      	add	r7, sp, #0
 8100c1e:	60f8      	str	r0, [r7, #12]
 8100c20:	460b      	mov	r3, r1
 8100c22:	607a      	str	r2, [r7, #4]
 8100c24:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100c26:	4b37      	ldr	r3, [pc, #220]	; (8100d04 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c28:	681b      	ldr	r3, [r3, #0]
 8100c2a:	f023 0201 	bic.w	r2, r3, #1
 8100c2e:	4935      	ldr	r1, [pc, #212]	; (8100d04 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c30:	68fb      	ldr	r3, [r7, #12]
 8100c32:	4313      	orrs	r3, r2
 8100c34:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100c36:	687b      	ldr	r3, [r7, #4]
 8100c38:	2b00      	cmp	r3, #0
 8100c3a:	d123      	bne.n	8100c84 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100c3c:	f7ff fdc8 	bl	81007d0 <HAL_GetCurrentCPUID>
 8100c40:	4603      	mov	r3, r0
 8100c42:	2b03      	cmp	r3, #3
 8100c44:	d158      	bne.n	8100cf8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100c46:	4b2f      	ldr	r3, [pc, #188]	; (8100d04 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c48:	691b      	ldr	r3, [r3, #16]
 8100c4a:	4a2e      	ldr	r2, [pc, #184]	; (8100d04 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c4c:	f023 0301 	bic.w	r3, r3, #1
 8100c50:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100c52:	4b2d      	ldr	r3, [pc, #180]	; (8100d08 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100c54:	691b      	ldr	r3, [r3, #16]
 8100c56:	4a2c      	ldr	r2, [pc, #176]	; (8100d08 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100c58:	f043 0304 	orr.w	r3, r3, #4
 8100c5c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100c5e:	f3bf 8f4f 	dsb	sy
}
 8100c62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100c64:	f3bf 8f6f 	isb	sy
}
 8100c68:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100c6a:	7afb      	ldrb	r3, [r7, #11]
 8100c6c:	2b01      	cmp	r3, #1
 8100c6e:	d101      	bne.n	8100c74 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100c70:	bf30      	wfi
 8100c72:	e000      	b.n	8100c76 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100c74:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100c76:	4b24      	ldr	r3, [pc, #144]	; (8100d08 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100c78:	691b      	ldr	r3, [r3, #16]
 8100c7a:	4a23      	ldr	r2, [pc, #140]	; (8100d08 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100c7c:	f023 0304 	bic.w	r3, r3, #4
 8100c80:	6113      	str	r3, [r2, #16]
 8100c82:	e03c      	b.n	8100cfe <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100c84:	687b      	ldr	r3, [r7, #4]
 8100c86:	2b01      	cmp	r3, #1
 8100c88:	d123      	bne.n	8100cd2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100c8a:	f7ff fda1 	bl	81007d0 <HAL_GetCurrentCPUID>
 8100c8e:	4603      	mov	r3, r0
 8100c90:	2b01      	cmp	r3, #1
 8100c92:	d133      	bne.n	8100cfc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100c94:	4b1b      	ldr	r3, [pc, #108]	; (8100d04 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c96:	695b      	ldr	r3, [r3, #20]
 8100c98:	4a1a      	ldr	r2, [pc, #104]	; (8100d04 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100c9a:	f023 0302 	bic.w	r3, r3, #2
 8100c9e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100ca0:	4b19      	ldr	r3, [pc, #100]	; (8100d08 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ca2:	691b      	ldr	r3, [r3, #16]
 8100ca4:	4a18      	ldr	r2, [pc, #96]	; (8100d08 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100ca6:	f043 0304 	orr.w	r3, r3, #4
 8100caa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100cac:	f3bf 8f4f 	dsb	sy
}
 8100cb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100cb2:	f3bf 8f6f 	isb	sy
}
 8100cb6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100cb8:	7afb      	ldrb	r3, [r7, #11]
 8100cba:	2b01      	cmp	r3, #1
 8100cbc:	d101      	bne.n	8100cc2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100cbe:	bf30      	wfi
 8100cc0:	e000      	b.n	8100cc4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100cc2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100cc4:	4b10      	ldr	r3, [pc, #64]	; (8100d08 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cc6:	691b      	ldr	r3, [r3, #16]
 8100cc8:	4a0f      	ldr	r2, [pc, #60]	; (8100d08 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cca:	f023 0304 	bic.w	r3, r3, #4
 8100cce:	6113      	str	r3, [r2, #16]
 8100cd0:	e015      	b.n	8100cfe <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100cd2:	f7ff fd7d 	bl	81007d0 <HAL_GetCurrentCPUID>
 8100cd6:	4603      	mov	r3, r0
 8100cd8:	2b03      	cmp	r3, #3
 8100cda:	d106      	bne.n	8100cea <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100cdc:	4b09      	ldr	r3, [pc, #36]	; (8100d04 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cde:	691b      	ldr	r3, [r3, #16]
 8100ce0:	4a08      	ldr	r2, [pc, #32]	; (8100d04 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ce2:	f023 0304 	bic.w	r3, r3, #4
 8100ce6:	6113      	str	r3, [r2, #16]
 8100ce8:	e009      	b.n	8100cfe <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100cea:	4b06      	ldr	r3, [pc, #24]	; (8100d04 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cec:	695b      	ldr	r3, [r3, #20]
 8100cee:	4a05      	ldr	r2, [pc, #20]	; (8100d04 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cf0:	f023 0304 	bic.w	r3, r3, #4
 8100cf4:	6153      	str	r3, [r2, #20]
 8100cf6:	e002      	b.n	8100cfe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100cf8:	bf00      	nop
 8100cfa:	e000      	b.n	8100cfe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100cfc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100cfe:	3710      	adds	r7, #16
 8100d00:	46bd      	mov	sp, r7
 8100d02:	bd80      	pop	{r7, pc}
 8100d04:	58024800 	.word	0x58024800
 8100d08:	e000ed00 	.word	0xe000ed00

08100d0c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100d0c:	b580      	push	{r7, lr}
 8100d0e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100d10:	f7ff fd5e 	bl	81007d0 <HAL_GetCurrentCPUID>
 8100d14:	4603      	mov	r3, r0
 8100d16:	2b03      	cmp	r3, #3
 8100d18:	d101      	bne.n	8100d1e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100d1a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100d1c:	e001      	b.n	8100d22 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100d1e:	bf40      	sev
    __WFE ();
 8100d20:	bf20      	wfe
}
 8100d22:	bf00      	nop
 8100d24:	bd80      	pop	{r7, pc}
	...

08100d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100d28:	b480      	push	{r7}
 8100d2a:	b089      	sub	sp, #36	; 0x24
 8100d2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100d2e:	4bb3      	ldr	r3, [pc, #716]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100d30:	691b      	ldr	r3, [r3, #16]
 8100d32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100d36:	2b18      	cmp	r3, #24
 8100d38:	f200 8155 	bhi.w	8100fe6 <HAL_RCC_GetSysClockFreq+0x2be>
 8100d3c:	a201      	add	r2, pc, #4	; (adr r2, 8100d44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100d42:	bf00      	nop
 8100d44:	08100da9 	.word	0x08100da9
 8100d48:	08100fe7 	.word	0x08100fe7
 8100d4c:	08100fe7 	.word	0x08100fe7
 8100d50:	08100fe7 	.word	0x08100fe7
 8100d54:	08100fe7 	.word	0x08100fe7
 8100d58:	08100fe7 	.word	0x08100fe7
 8100d5c:	08100fe7 	.word	0x08100fe7
 8100d60:	08100fe7 	.word	0x08100fe7
 8100d64:	08100dcf 	.word	0x08100dcf
 8100d68:	08100fe7 	.word	0x08100fe7
 8100d6c:	08100fe7 	.word	0x08100fe7
 8100d70:	08100fe7 	.word	0x08100fe7
 8100d74:	08100fe7 	.word	0x08100fe7
 8100d78:	08100fe7 	.word	0x08100fe7
 8100d7c:	08100fe7 	.word	0x08100fe7
 8100d80:	08100fe7 	.word	0x08100fe7
 8100d84:	08100dd5 	.word	0x08100dd5
 8100d88:	08100fe7 	.word	0x08100fe7
 8100d8c:	08100fe7 	.word	0x08100fe7
 8100d90:	08100fe7 	.word	0x08100fe7
 8100d94:	08100fe7 	.word	0x08100fe7
 8100d98:	08100fe7 	.word	0x08100fe7
 8100d9c:	08100fe7 	.word	0x08100fe7
 8100da0:	08100fe7 	.word	0x08100fe7
 8100da4:	08100ddb 	.word	0x08100ddb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100da8:	4b94      	ldr	r3, [pc, #592]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100daa:	681b      	ldr	r3, [r3, #0]
 8100dac:	f003 0320 	and.w	r3, r3, #32
 8100db0:	2b00      	cmp	r3, #0
 8100db2:	d009      	beq.n	8100dc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100db4:	4b91      	ldr	r3, [pc, #580]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100db6:	681b      	ldr	r3, [r3, #0]
 8100db8:	08db      	lsrs	r3, r3, #3
 8100dba:	f003 0303 	and.w	r3, r3, #3
 8100dbe:	4a90      	ldr	r2, [pc, #576]	; (8101000 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8100dc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100dc6:	e111      	b.n	8100fec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100dc8:	4b8d      	ldr	r3, [pc, #564]	; (8101000 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100dca:	61bb      	str	r3, [r7, #24]
      break;
 8100dcc:	e10e      	b.n	8100fec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100dce:	4b8d      	ldr	r3, [pc, #564]	; (8101004 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100dd0:	61bb      	str	r3, [r7, #24]
      break;
 8100dd2:	e10b      	b.n	8100fec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100dd4:	4b8c      	ldr	r3, [pc, #560]	; (8101008 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100dd6:	61bb      	str	r3, [r7, #24]
      break;
 8100dd8:	e108      	b.n	8100fec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100dda:	4b88      	ldr	r3, [pc, #544]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100dde:	f003 0303 	and.w	r3, r3, #3
 8100de2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100de4:	4b85      	ldr	r3, [pc, #532]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100de8:	091b      	lsrs	r3, r3, #4
 8100dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100dee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100df0:	4b82      	ldr	r3, [pc, #520]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100df4:	f003 0301 	and.w	r3, r3, #1
 8100df8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100dfa:	4b80      	ldr	r3, [pc, #512]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100dfe:	08db      	lsrs	r3, r3, #3
 8100e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100e04:	68fa      	ldr	r2, [r7, #12]
 8100e06:	fb02 f303 	mul.w	r3, r2, r3
 8100e0a:	ee07 3a90 	vmov	s15, r3
 8100e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100e12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100e16:	693b      	ldr	r3, [r7, #16]
 8100e18:	2b00      	cmp	r3, #0
 8100e1a:	f000 80e1 	beq.w	8100fe0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100e1e:	697b      	ldr	r3, [r7, #20]
 8100e20:	2b02      	cmp	r3, #2
 8100e22:	f000 8083 	beq.w	8100f2c <HAL_RCC_GetSysClockFreq+0x204>
 8100e26:	697b      	ldr	r3, [r7, #20]
 8100e28:	2b02      	cmp	r3, #2
 8100e2a:	f200 80a1 	bhi.w	8100f70 <HAL_RCC_GetSysClockFreq+0x248>
 8100e2e:	697b      	ldr	r3, [r7, #20]
 8100e30:	2b00      	cmp	r3, #0
 8100e32:	d003      	beq.n	8100e3c <HAL_RCC_GetSysClockFreq+0x114>
 8100e34:	697b      	ldr	r3, [r7, #20]
 8100e36:	2b01      	cmp	r3, #1
 8100e38:	d056      	beq.n	8100ee8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100e3a:	e099      	b.n	8100f70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100e3c:	4b6f      	ldr	r3, [pc, #444]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e3e:	681b      	ldr	r3, [r3, #0]
 8100e40:	f003 0320 	and.w	r3, r3, #32
 8100e44:	2b00      	cmp	r3, #0
 8100e46:	d02d      	beq.n	8100ea4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100e48:	4b6c      	ldr	r3, [pc, #432]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e4a:	681b      	ldr	r3, [r3, #0]
 8100e4c:	08db      	lsrs	r3, r3, #3
 8100e4e:	f003 0303 	and.w	r3, r3, #3
 8100e52:	4a6b      	ldr	r2, [pc, #428]	; (8101000 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100e54:	fa22 f303 	lsr.w	r3, r2, r3
 8100e58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100e5a:	687b      	ldr	r3, [r7, #4]
 8100e5c:	ee07 3a90 	vmov	s15, r3
 8100e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100e64:	693b      	ldr	r3, [r7, #16]
 8100e66:	ee07 3a90 	vmov	s15, r3
 8100e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100e72:	4b62      	ldr	r3, [pc, #392]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100e7a:	ee07 3a90 	vmov	s15, r3
 8100e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8100e86:	eddf 5a61 	vldr	s11, [pc, #388]	; 810100c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100e9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8100ea2:	e087      	b.n	8100fb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100ea4:	693b      	ldr	r3, [r7, #16]
 8100ea6:	ee07 3a90 	vmov	s15, r3
 8100eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100eae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101010 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100eb6:	4b51      	ldr	r3, [pc, #324]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100ebe:	ee07 3a90 	vmov	s15, r3
 8100ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8100eca:	eddf 5a50 	vldr	s11, [pc, #320]	; 810100c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100ee2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100ee6:	e065      	b.n	8100fb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100ee8:	693b      	ldr	r3, [r7, #16]
 8100eea:	ee07 3a90 	vmov	s15, r3
 8100eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ef2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101014 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100efa:	4b40      	ldr	r3, [pc, #256]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f02:	ee07 3a90 	vmov	s15, r3
 8100f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810100c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100f2a:	e043      	b.n	8100fb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100f2c:	693b      	ldr	r3, [r7, #16]
 8100f2e:	ee07 3a90 	vmov	s15, r3
 8100f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101018 <HAL_RCC_GetSysClockFreq+0x2f0>
 8100f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f3e:	4b2f      	ldr	r3, [pc, #188]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f46:	ee07 3a90 	vmov	s15, r3
 8100f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810100c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100f6e:	e021      	b.n	8100fb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100f70:	693b      	ldr	r3, [r7, #16]
 8100f72:	ee07 3a90 	vmov	s15, r3
 8100f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101014 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f82:	4b1e      	ldr	r3, [pc, #120]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f8a:	ee07 3a90 	vmov	s15, r3
 8100f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810100c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100fae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100fb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8100fb4:	4b11      	ldr	r3, [pc, #68]	; (8100ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100fb8:	0a5b      	lsrs	r3, r3, #9
 8100fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8100fbe:	3301      	adds	r3, #1
 8100fc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8100fc2:	683b      	ldr	r3, [r7, #0]
 8100fc4:	ee07 3a90 	vmov	s15, r3
 8100fc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8100fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100fd8:	ee17 3a90 	vmov	r3, s15
 8100fdc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8100fde:	e005      	b.n	8100fec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8100fe0:	2300      	movs	r3, #0
 8100fe2:	61bb      	str	r3, [r7, #24]
      break;
 8100fe4:	e002      	b.n	8100fec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8100fe6:	4b07      	ldr	r3, [pc, #28]	; (8101004 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100fe8:	61bb      	str	r3, [r7, #24]
      break;
 8100fea:	bf00      	nop
  }

  return sysclockfreq;
 8100fec:	69bb      	ldr	r3, [r7, #24]
}
 8100fee:	4618      	mov	r0, r3
 8100ff0:	3724      	adds	r7, #36	; 0x24
 8100ff2:	46bd      	mov	sp, r7
 8100ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ff8:	4770      	bx	lr
 8100ffa:	bf00      	nop
 8100ffc:	58024400 	.word	0x58024400
 8101000:	03d09000 	.word	0x03d09000
 8101004:	003d0900 	.word	0x003d0900
 8101008:	007a1200 	.word	0x007a1200
 810100c:	46000000 	.word	0x46000000
 8101010:	4c742400 	.word	0x4c742400
 8101014:	4a742400 	.word	0x4a742400
 8101018:	4af42400 	.word	0x4af42400

0810101c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 810101c:	b580      	push	{r7, lr}
 810101e:	b082      	sub	sp, #8
 8101020:	af00      	add	r7, sp, #0
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101022:	4b1f      	ldr	r3, [pc, #124]	; (81010a0 <main+0x84>)
 8101024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101028:	4a1d      	ldr	r2, [pc, #116]	; (81010a0 <main+0x84>)
 810102a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810102e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101032:	4b1b      	ldr	r3, [pc, #108]	; (81010a0 <main+0x84>)
 8101034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810103c:	607b      	str	r3, [r7, #4]
 810103e:	687b      	ldr	r3, [r7, #4]
 
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101040:	2001      	movs	r0, #1
 8101042:	f7ff fdd7 	bl	8100bf4 <HAL_HSEM_ActivateNotification>
  
  /* 
    Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
    perform system initialization (system clock config, external memory configuration.. )   
  */
  HAL_PWREx_ClearPendingEvent();
 8101046:	f7ff fe61 	bl	8100d0c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810104a:	2201      	movs	r2, #1
 810104c:	2102      	movs	r1, #2
 810104e:	2000      	movs	r0, #0
 8101050:	f7ff fde2 	bl	8100c18 <HAL_PWREx_EnterSTOPMode>

  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101054:	4b13      	ldr	r3, [pc, #76]	; (81010a4 <main+0x88>)
 8101056:	681b      	ldr	r3, [r3, #0]
 8101058:	091b      	lsrs	r3, r3, #4
 810105a:	f003 030f 	and.w	r3, r3, #15
 810105e:	2b07      	cmp	r3, #7
 8101060:	d108      	bne.n	8101074 <main+0x58>
 8101062:	4b11      	ldr	r3, [pc, #68]	; (81010a8 <main+0x8c>)
 8101064:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101068:	4a0f      	ldr	r2, [pc, #60]	; (81010a8 <main+0x8c>)
 810106a:	f043 0301 	orr.w	r3, r3, #1
 810106e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101072:	e007      	b.n	8101084 <main+0x68>
 8101074:	4b0c      	ldr	r3, [pc, #48]	; (81010a8 <main+0x8c>)
 8101076:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810107a:	4a0b      	ldr	r2, [pc, #44]	; (81010a8 <main+0x8c>)
 810107c:	f043 0301 	orr.w	r3, r3, #1
 8101080:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8101084:	f7ff f9e4 	bl	8100450 <HAL_Init>
  
  /* -1- Initialize LEDs mounted on STM32H745ZI-Nucleo board */
  BSP_LED_Init(LED2);
 8101088:	2001      	movs	r0, #1
 810108a:	f7ff f925 	bl	81002d8 <BSP_LED_Init>
  
  /* Enable and set EXTI lines 15 to 10 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 810108e:	2200      	movs	r2, #0
 8101090:	2102      	movs	r1, #2
 8101092:	2028      	movs	r0, #40	; 0x28
 8101094:	f7ff fb67 	bl	8100766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); 
 8101098:	2028      	movs	r0, #40	; 0x28
 810109a:	f7ff fb7e 	bl	810079a <HAL_NVIC_EnableIRQ>


  /* Infinite loop */
  while (1)
 810109e:	e7fe      	b.n	810109e <main+0x82>
 81010a0:	58024400 	.word	0x58024400
 81010a4:	e000ed00 	.word	0xe000ed00
 81010a8:	58026400 	.word	0x58026400

081010ac <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{  
 81010ac:	b580      	push	{r7, lr}
 81010ae:	b082      	sub	sp, #8
 81010b0:	af00      	add	r7, sp, #0
 81010b2:	4603      	mov	r3, r0
 81010b4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 81010b6:	88fb      	ldrh	r3, [r7, #6]
 81010b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81010bc:	d102      	bne.n	81010c4 <HAL_GPIO_EXTI_Callback+0x18>
  {
    /* Toggle LED2 */
    BSP_LED_Toggle(LED2);
 81010be:	2001      	movs	r0, #1
 81010c0:	f7ff f980 	bl	81003c4 <BSP_LED_Toggle>
  }
}
 81010c4:	bf00      	nop
 81010c6:	3708      	adds	r7, #8
 81010c8:	46bd      	mov	sp, r7
 81010ca:	bd80      	pop	{r7, pc}

081010cc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 81010cc:	b480      	push	{r7}
 81010ce:	af00      	add	r7, sp, #0
}
 81010d0:	bf00      	nop
 81010d2:	46bd      	mov	sp, r7
 81010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010d8:	4770      	bx	lr

081010da <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 81010da:	b480      	push	{r7}
 81010dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 81010de:	e7fe      	b.n	81010de <HardFault_Handler+0x4>

081010e0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 81010e0:	b480      	push	{r7}
 81010e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 81010e4:	e7fe      	b.n	81010e4 <MemManage_Handler+0x4>

081010e6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 81010e6:	b480      	push	{r7}
 81010e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 81010ea:	e7fe      	b.n	81010ea <BusFault_Handler+0x4>

081010ec <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 81010ec:	b480      	push	{r7}
 81010ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 81010f0:	e7fe      	b.n	81010f0 <UsageFault_Handler+0x4>

081010f2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 81010f2:	b480      	push	{r7}
 81010f4:	af00      	add	r7, sp, #0
}
 81010f6:	bf00      	nop
 81010f8:	46bd      	mov	sp, r7
 81010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010fe:	4770      	bx	lr

08101100 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8101100:	b480      	push	{r7}
 8101102:	af00      	add	r7, sp, #0
}
 8101104:	bf00      	nop
 8101106:	46bd      	mov	sp, r7
 8101108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810110c:	4770      	bx	lr

0810110e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 810110e:	b480      	push	{r7}
 8101110:	af00      	add	r7, sp, #0
}
 8101112:	bf00      	nop
 8101114:	46bd      	mov	sp, r7
 8101116:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111a:	4770      	bx	lr

0810111c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 810111c:	b580      	push	{r7, lr}
 810111e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8101120:	f7ff fa32 	bl	8100588 <HAL_IncTick>
}
 8101124:	bf00      	nop
 8101126:	bd80      	pop	{r7, pc}

08101128 <EXTI15_10_IRQHandler>:
  * @brief  This function handles external lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8101128:	b580      	push	{r7, lr}
 810112a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 810112c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8101130:	f7ff fd45 	bl	8100bbe <HAL_GPIO_EXTI_IRQHandler>
}
 8101134:	bf00      	nop
 8101136:	bd80      	pop	{r7, pc}

08101138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101170 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810113c:	f7ff f96c 	bl	8100418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101140:	480c      	ldr	r0, [pc, #48]	; (8101174 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101142:	490d      	ldr	r1, [pc, #52]	; (8101178 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101144:	4a0d      	ldr	r2, [pc, #52]	; (810117c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101148:	e002      	b.n	8101150 <LoopCopyDataInit>

0810114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810114e:	3304      	adds	r3, #4

08101150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101154:	d3f9      	bcc.n	810114a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101156:	4a0a      	ldr	r2, [pc, #40]	; (8101180 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101158:	4c0a      	ldr	r4, [pc, #40]	; (8101184 <LoopFillZerobss+0x22>)
  movs r3, #0
 810115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810115c:	e001      	b.n	8101162 <LoopFillZerobss>

0810115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101160:	3204      	adds	r2, #4

08101162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101164:	d3fb      	bcc.n	810115e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101166:	f000 f811 	bl	810118c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810116a:	f7ff ff57 	bl	810101c <main>
  bx  lr
 810116e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101170:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101174:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101178:	1000001c 	.word	0x1000001c
  ldr r2, =_sidata
 810117c:	0810120c 	.word	0x0810120c
  ldr r2, =_sbss
 8101180:	1000001c 	.word	0x1000001c
  ldr r4, =_ebss
 8101184:	1000003c 	.word	0x1000003c

08101188 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101188:	e7fe      	b.n	8101188 <ADC3_IRQHandler>
	...

0810118c <__libc_init_array>:
 810118c:	b570      	push	{r4, r5, r6, lr}
 810118e:	4d0d      	ldr	r5, [pc, #52]	; (81011c4 <__libc_init_array+0x38>)
 8101190:	4c0d      	ldr	r4, [pc, #52]	; (81011c8 <__libc_init_array+0x3c>)
 8101192:	1b64      	subs	r4, r4, r5
 8101194:	10a4      	asrs	r4, r4, #2
 8101196:	2600      	movs	r6, #0
 8101198:	42a6      	cmp	r6, r4
 810119a:	d109      	bne.n	81011b0 <__libc_init_array+0x24>
 810119c:	4d0b      	ldr	r5, [pc, #44]	; (81011cc <__libc_init_array+0x40>)
 810119e:	4c0c      	ldr	r4, [pc, #48]	; (81011d0 <__libc_init_array+0x44>)
 81011a0:	f000 f818 	bl	81011d4 <_init>
 81011a4:	1b64      	subs	r4, r4, r5
 81011a6:	10a4      	asrs	r4, r4, #2
 81011a8:	2600      	movs	r6, #0
 81011aa:	42a6      	cmp	r6, r4
 81011ac:	d105      	bne.n	81011ba <__libc_init_array+0x2e>
 81011ae:	bd70      	pop	{r4, r5, r6, pc}
 81011b0:	f855 3b04 	ldr.w	r3, [r5], #4
 81011b4:	4798      	blx	r3
 81011b6:	3601      	adds	r6, #1
 81011b8:	e7ee      	b.n	8101198 <__libc_init_array+0xc>
 81011ba:	f855 3b04 	ldr.w	r3, [r5], #4
 81011be:	4798      	blx	r3
 81011c0:	3601      	adds	r6, #1
 81011c2:	e7f2      	b.n	81011aa <__libc_init_array+0x1e>
 81011c4:	08101204 	.word	0x08101204
 81011c8:	08101204 	.word	0x08101204
 81011cc:	08101204 	.word	0x08101204
 81011d0:	08101208 	.word	0x08101208

081011d4 <_init>:
 81011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81011d6:	bf00      	nop
 81011d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81011da:	bc08      	pop	{r3}
 81011dc:	469e      	mov	lr, r3
 81011de:	4770      	bx	lr

081011e0 <_fini>:
 81011e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81011e2:	bf00      	nop
 81011e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81011e6:	bc08      	pop	{r3}
 81011e8:	469e      	mov	lr, r3
 81011ea:	4770      	bx	lr
